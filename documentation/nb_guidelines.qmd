---
pagetitle: "Atlas Notebook Guidelines"
format:
  html:
    code-fold: true
    code-summary: "Show the code"
---

```{ojs}
//| echo: false
{
    let hero_url = "https://static.observableusercontent.com/files/989edb75ebd2385598efb095854863f630369e73c55a75bcfcbcc4af67a76a7a5f4b9194039ef3e497f7d95aacf903d84532119cc8dce5624f4a4bb40c4b7768"

    return htl.html`
        <h1 class="notebook-title" style="display: none;">${notebookTitle}</h1>
        <img src="${hero_url}" style="width: 100%; height: 400px; object-fit: cover; overflow: hidden;"/>
`
}

```


# Overview

This notebook includes guidelines for the Agriculture Adaptation Atlas' collection of Observable Notebooks. It suggests best practices for consistent styling, narrative structure, and example cells that can be used as the Alliance Bioversity team and the community creates their own notebooks.

Please note: this should be considered a *living document* that can be added to by request of Alliance Bioversity team.

# Creating a Narrative

To create a narrative for your Observable Notebook, we suggest following a general story arc and structure:

1. **Hero Image (with title).** A succinct title capturing the premise of the Notebook. See below for additional information on creating a hero image with help from the Alliance Bioversity team.
2. **Introductory Paragraph.** Introductory framing text for the Notebook.
3. **Narrative Sections.** 3-4 sections that convey a narrative. They include headers, descriptive text, data presentations, and dynamic insights (if applicable).
 - 1-2 data presentations/visualizations per each section. As applicable, controls can be global and be synced across all sections
 - Brief descriptive text, explaining the section takeaway and any context about the chart.
 - If applicable, a set of dynamic Insights that update based on user selection of various controls of the charts, located below the chart
4. **Summary Paragraph.** Summary text for the Notebook. This section may include
 - Higher-level dynamic insights that summarize the key takeaways of the Notebook
 - Next steps or actions users can take such as hyperlinks to additional resources.
5. **Methods & Sources.** Methods & sources for the Notebook.
6. **Appendix.** This large section includes any cells that power the Notebook. This should exist at the bottom of the Notebook to mitigate any disruption to the narrative.

Please reach out to us if you need help crafting your narrative, and we'd be happy to help.

# Text Stylings
## Using Headers
To best format the sections within the narrative, please use header tags:

- Adding "#" before text creates an H1 header. Use it for headings of main sections. 
- Adding "##" before text creates an H2 header. Use it for chart titles.
- Adding "###" before text creates an H3 header. Use it for subtitles within charts and for titles for data insights related to charts.

We recommend using title case for headers.

## Dynamic Insights
As can be seen in the "What's at Risk" notebook, we have developed dynamic insights within the text that changes based on the selection of various controls throughout the tool. To emphasize that this text is dynamic, we **bold** the dynamic portion of the sentence.

Dynamic Insights are to be placed in a subsection with an H3 header ""###"" below each visualization at the end of each main section.

These dynamic insights can be in partial or full sentence form, and in either an bulleted list or not (could vary depending on the specific insight).

# Adding a Table of Contents

We have put together a table of contents function that you can use in your own notebooks. Below is an example:

```{ojs}
function tocOneliner({
  selector = "h1", // selectors to include (can comma-separate, like "h1,h2,h3")
  heading = "<b>In this notebook</b>", // heading for ToC
  delim = '&nbsp;|&nbsp;', // delimiter between links
  skip = [], // text content for headers to exclude
} = {}) {

  return Generators.observe(notify => {
    let headings = [];

    function observed() {
      let h = Array.from(document.querySelectorAll(selector));
      h = h.filter((d) => !skip.includes(d.textContent))
      if (h.length !== headings.length || h.some((h, i) => headings[i] !== h)) {
        notify(html`${heading}<br>${Array.from(headings = h, (h, i) => {
          const end = i === headings.length - 1
          return Object.assign(
            html`<a href=#${h.id}>${DOM.text(h.textContent)}</a>${end ? '' : delim}`,
            {onclick: e => (e.preventDefault(), h.scrollIntoView())}
          );
        })}`);
      }
    }

    const observer = new MutationObserver(observed);
    observer.observe(document.body, {childList: true, subtree: true});
    observed();
    return () => observer.disconnect();
  });
}

tocOneliner({
  skip: [notebookTitle, "Appendix"]
})
```

Notice by defining the main title as a variable (in [this notebook's Appendix](https://observablehq.com/d/ffcfa914e30d6e5a#cell-13)), we can specify we want to ignore it, along with any other sections. The function defaults to only show h1 headers.

You can copy the code below to use in notebooks.

# Color Scales

Below are some example linear color scales you can use, all defined by endpoint color values.

Please note that color scales may need to be designed on a chart-by-chart basis. The color scales listed below are a few developed for various charts in the "What's at Risk?" and "On-farm Solutions for Today" notebooks. 

Regarding the direction to apply the scales, we have been mapping green (from the yellowGreen scale) to normatively "better" values and red (from the orangeRed scale) to normatively "worse" values. 

```{ojs}
colorScales = [
  { name: "yellowGreen", range: ["#F7D732", "#216729"] },
  { name: "orangeRed", range: ["#F4BB21", "#EC5A47"] }
]

viewof select = Inputs.select(colorScales, {label: "Show a color scale", format: x => x.name})

Plot.plot({
  color: {
    type: "linear",
    range: select.range,
  },
  marks: [
    Plot.cell(d3.range(50), {x: d => d, fill: d => d})
  ],
  axis: null,
  height: 30,
  x: {padding: -0.1},
  width: 600
})

viewof copyImport = Inputs.button(`Copy ${select.name} color range`, {reduce: () => navigator.clipboard.writeText(select.range)})

```


# Wrangling Data

The most straightforward way to upload data to Observable Notebooks is including data files as [File Attachments](https://observablehq.com/documentation/data/files/file-attachments). Observable allows for many different kinds of data to be used. Regarding data manipulation, it is recommended to consolidate wrangling into a few cells rather than splitting every cell up into separate cells. For example, you can use a block within a js cell to define multiple lines ([see Cells from Observable Documentation](https://observablehq.com/documentation/cells/) for examples).

Other Data-related notes
- Data files have a file of 50MB each. Multiple <50MB data files can be used to build a chart.
- Depending on the “Preview” pages on the Adaptation Atlas site, "naming cells" in the Notebook may be needed for the purpose of embedding select charts into these site pages. Embedded cells also need to include styling, which can be attached on a per-cell basis.
  - Note: all cells can be named. See documentation on [naming cells](https://observablehq.com/documentation/cells/#naming-cells) for help with naming different types of cells.

More advanced data/database connections do exist for loading data, but attaching data files as a file attachment is the most straightforward approach.

# Other Resources
- **[Observable Documentation](https://observablehq.com/documentation/)**: for any questions about Observable, their documentation is a great resource. We have referenced specific sections that can help.

```{ojs}
//| echo: false 
notebookTitle = 'Agriculture Adaptation Atlas: Data Exploration Guidelines'
```


```{ojs}
//| echo: false
import { atlas_toc } from '../helpers/styleBuilders.ojs'
toc_bottom = atlas_toc({
  skip: [notebookTitle, "notebook-title", "Appendix"]
})

htl.html`
      <div class='floating-toc'>
      ${toc_bottom}
      </div>
      `
```
