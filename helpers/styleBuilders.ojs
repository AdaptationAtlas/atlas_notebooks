function atlas_hero(nbTitle, image_url) {
// htl.html`
// <div id="hero-image" style="position: relative; width: 100%; max-width: 100%; padding-bottom: 75px; overflow: visible; display: flex; justify-content: center;">
//   <img class='hero_image' src="../images/test_im.webp" style="width: 100%; height: 175px; object-fit: cover;" />
//   <div style="position: absolute; top: 125px; width: 60%; max-width: 90%; padding: 15px; display: flex; justify-content: center; align-items: center; flex-direction: column; text-align: center; background-color: white; z-index: 10; box-sizing: border-box;">
//     <h1 style="all: unset; font-size: 28px; font-weight: 700; word-wrap: break-word; line-height: 1.2;">${nbTitle}</h1>
//   </div>
// </div>`
// ^^^ This is an alternate version where the title is half oon/half off the image
return htl.html`
<div id="hero-image" style="position: relative; width: 100%; max-width: 100%; overflow: visible; display: flex; justify-content: center;">
  <img src="${image_url}" style="width: 100%; height: 175px; object-fit: cover;" />
  <div style="position: absolute; bottom: 0; width: 60%; max-width: 90%; padding: 15px; display: flex; justify-content: center; align-items: center; flex-direction: column; text-align: center; background-color: white; z-index: 10; box-sizing: border-box;">
    <h1 class='title' id='notebook-title' style="all: unset; font-size: 28px; font-weight: 700; word-wrap: break-word; line-height: 1.2;">${nbTitle}</h1>
  </div>
</div>`
}

// Generate the TOC dynamically
function atlas_toc({
  selector = "h1", // Selectors to include (e.g., "h1,h2,h3")
  heading = "<b>In this notebook</b>", // Heading for ToC
  delim = '&nbsp;|&nbsp;', // Delimiter between links
  skip = ['notebook-title'], // Headers to exclude by text content
  activeClass = "active", // Class for active link
} = {}) {

  return Generators.observe(notify => {
    let headings = [];
    let links = [];
    let timeout;

    function observed() {
      clearTimeout(timeout);
      timeout = setTimeout(() => {

        const h = Array.from(document.querySelectorAll(selector))
          .filter(d => 
            !skip.some(value => 
              d.parentElement.id === value ||
              d.id === value ||
              d.textContent === value || 
              d.className === value
            )
          );

        if (h.length === headings.length && h.every((el, i) => el === headings[i
        ])) return;

        headings = h;
        links = headings.map(createLink);

        notify(html`${heading
        }<br>${
          headings.length 
            ? links.map((link, i) => html`<span>${link
          }${i < links.length - 1 ? delim : ''
          }</span>`)
            : html`<span>No headings found.</span>`
        }`);
        onScroll()
      },
      5);
    }

    function createLink(h) {
      const section_id = h.parentElement.id
      const link = html`
      <a class='toc-link' href=#${section_id}>
        ${DOM.text(h.textContent)}
      </a>`;
      link.onclick = e => {
        e.preventDefault();
        h.scrollIntoView({ behavior: 'smooth'
        });
        setActiveLink(link);
      };
      return link;
    }

    function setActiveLink(activeLink) {
      console.log(activeLink)
      links.forEach(link => link.classList.toggle(activeClass, link === activeLink));
    }

    function onScroll() {
      const closest = links[headings
        .map(h => Math.abs(h.getBoundingClientRect().top))
        .reduce((minIdx, dist, i, arr) => dist < arr[minIdx
        ] ? i : minIdx,
        0)
      ];
      setActiveLink(closest);
    }

    const observer = new MutationObserver(observed);
    observer.observe(document.body,
    { childList: true, subtree: true
    });
    window.addEventListener('scroll', onScroll);

    observed();
    onScroll();

    return () => {
      observer.disconnect();
      window.removeEventListener('scroll', onScroll);
    };
  });
}