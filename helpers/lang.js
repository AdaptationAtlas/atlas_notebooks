const c="2.0.1";function f(e){return n=>l(n,{key:e})}function l(e,{key:n=null}={}){if(n===null)throw new Error("No 'key' field; please provide a language key.");return e?.[n]}function u(e,{start:n=":::",end:t=":::"}={}){return new RegExp(`${n}\\s*${e}\\s*${t}`,"g")}function p(e,n,{templateNameField:t="name",templateValueField:s="value",...r}={}){return n.reduce((o,a)=>o.replace(u(a[t],{...r}),a[s]),e)}function g(e,n){const t=[];function s(r,o){if(!(typeof r!="object"||r===null)){if(Array.isArray(r)){if(r.length===0){t.push({[o]:r});return}r.forEach((a,i)=>s(a,`${o}[${i}]`));return}if(Object.keys(r).length===0){t.push({[o]:r});return}for(let a in r)if(Object.hasOwnProperty.call(r,a)){if(typeof r[a]=="object"&&r[a]!==null)s(r[a],`${o}.${a}`);else if(n.filter(i=>!(i in r)).length>0){t.push({[o]:r});break}}}}return s(e,""),t}async function h({name:e,list:n,search:t=location.search}={}){if(!e||!n)throw new Error("'name' and 'list' parameters are required.");const s=new URLSearchParams(t).get(e);return s&&n.includes(s)?s:null}function m(e){if(typeof e!="string")throw new Error("Input must be a string");return e.replace(/\w\S*/g,n=>n.charAt(0).toUpperCase()+n.slice(1))}function y(e){if(typeof e!="string")throw new Error("Input must be a string");return e.charAt(0).toUpperCase()+e.slice(1)}export default{version:c,lg:f,getText:l,getRegexForNamedInsertion:u,reduceReplaceTemplateItems:p,listLeavesMissingObjectKeys:g,getParamFromList:h,toTitleCase:m,toSentenceCase:y};
