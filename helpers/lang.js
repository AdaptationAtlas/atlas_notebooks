const c="2.0.1";function f(e){return n=>u(n,{key:e})}function u(e,{key:n=null}={}){if(n===null)throw new Error("No 'key' field; please provide a language key.");return e?.[n]}function s(e,{start:n=":::",end:t=":::"}={}){return new RegExp(`${n}\\s*${e}\\s*${t}`,"g")}function p(e,n,{templateNameField:t="name",templateValueField:a="value",...r}={}){return n.reduce((o,i)=>o.replace(s(i[t],{...r}),i[a]),e)}function g(e,n){const t=[];function a(r,o){if(!(typeof r!="object"||r===null)){if(Array.isArray(r)){if(r.length===0){t.push({[o]:r});return}r.forEach((i,l)=>a(i,`${o}[${l}]`));return}if(Object.keys(r).length===0){t.push({[o]:r});return}for(let i in r)if(Object.hasOwnProperty.call(r,i)){if(typeof r[i]=="object"&&r[i]!==null)a(r[i],`${o}.${i}`);else if(n.filter(l=>!(l in r)).length>0){t.push({[o]:r});break}}}}return a(e,""),t}async function h({name:e,list:n,search:t=location.search}={}){if(!e||!n)throw new Error("'name' and 'list' parameters are required.");const a=new URLSearchParams(t).get(e);return a&&n.includes(a)?a:null}function m(e){if(typeof e!="string")throw new Error("Input must be a string");return e.replace(/\w\S*/g,n=>n.charAt(0).toUpperCase()+n.slice(1))}function y(e){if(typeof e!="string")throw new Error("Input must be a string");return e.charAt(0).toUpperCase()+e.slice(1)}export default{version:c,lg:f,getText:u,getRegexForNamedInsertion:s,reduceReplaceTemplateItems:p,listLeavesMissingObjectKeys:g,getParamFromList:h,toTitleCase:m,toSentenceCase:y};
