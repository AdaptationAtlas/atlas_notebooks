const c="2.0.1";export function lg(r){return t=>getText(t,{key:r})}export function getText(r,{key:t=null}={}){if(t===null)throw new Error("No 'key' field; please provide a language key.");return r?.[t]}export function getRegexForNamedInsertion(r,{start:t=":::",end:n=":::"}={}){return new RegExp(`${t}\\s*${r}\\s*${n}`,"g")}export function reduceReplaceTemplateItems(r,t,{templateNameField:n="name",templateValueField:a="value",...e}={}){return t.reduce((i,s)=>i.replace(getRegexForNamedInsertion(s[n],{...e}),s[a]),r)}export function listLeavesMissingObjectKeys(r,t){const n=[];function a(e,i){if(!(typeof e!="object"||e===null)){if(Array.isArray(e)){if(e.length===0){n.push({[i]:e});return}e.forEach((s,u)=>a(s,`${i}[${u}]`));return}if(Object.keys(e).length===0){n.push({[i]:e});return}for(let s in e)if(Object.hasOwnProperty.call(e,s)){if(typeof e[s]=="object"&&e[s]!==null)a(e[s],`${i}.${s}`);else if(t.filter(o=>!(o in e)).length>0){n.push({[i]:e});break}}}}return a(r,""),n}export async function getParamFromList({name:r,list:t,search:n=location.search}={}){if(!r||!t)throw new Error("'name' and 'list' parameters are required.");const e=new URLSearchParams(n).get(r);return e&&t.includes(e)?e:null}export function toTitleCase(r){if(typeof r!="string")throw new Error("Input must be a string");return r.replace(/\w\S*/g,t=>t.charAt(0).toUpperCase()+t.slice(1))}export function toSentenceCase(r){if(typeof r!="string")throw new Error("Input must be a string");return r.charAt(0).toUpperCase()+r.slice(1)}export const lang={version:c,lg,getText,getRegexForNamedInsertion,reduceReplaceTemplateItems,listLeavesMissingObjectKeys,getParamFromList,toTitleCase,toSentenceCase};export default lang;
