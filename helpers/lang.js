const c="2.0.1";function f(e){return n=>u(n,{key:e})}function u(e,{key:n=null}={}){if(n===null)throw new Error("No 'key' field; please provide a language key.");return e?.[n]}function o(e,{start:n=":::",end:r=":::"}={}){return new RegExp(`${n}\\s*${e}\\s*${r}`,"g")}function p(e,n,{templateNameField:r="name",templateValueField:i="value",...t}={}){return n.reduce((s,a)=>s.replace(o(a[r],{...t}),a[i]),e)}function g(e,n){const r=[];function i(t,s){if(!(typeof t!="object"||t===null)){if(Array.isArray(t)){if(t.length===0){r.push({[s]:t});return}t.forEach((a,l)=>i(a,`${s}[${l}]`));return}if(Object.keys(t).length===0){r.push({[s]:t});return}for(let a in t)if(Object.hasOwnProperty.call(t,a)){if(typeof t[a]=="object"&&t[a]!==null)i(t[a],`${s}.${a}`);else if(n.filter(l=>!(l in t)).length>0){r.push({[s]:t});break}}}}return i(e,""),r}async function h({name:e,list:n,search:r=location.search}={}){if(!e||!n)throw new Error("'name' and 'list' parameters are required.");const i=new URLSearchParams(r).get(e);return i&&n.includes(i)?i:null}function m(e){if(typeof e!="string")throw new Error("Input must be a string");return e.replace(/\w\S*/g,n=>n.charAt(0).toUpperCase()+n.slice(1))}function y(e){if(typeof e!="string")throw new Error("Input must be a string");return e.charAt(0).toUpperCase()+e.slice(1)}export default{version:c,lg:f,getText:u,getRegexForNamedInsertion:o,reduceReplaceTemplateItems:p,listLeavesMissingObjectKeys:g,getParamFromList:h,toTitleCase:m,toSentenceCase:y};
