---
pagetitle: "Atlas Notebook Template"
nb-authors: 
  - Brayden Youngberg
  - Pete Stewart
date-created: '2025-02-19'
date-edited: today
---

```{ojs}
import { atlasTOC, atlasHero } from "/helpers/uiComponents.ojs"

hero_url = "./../../images/default_im.webp" 
// This ^^ must be relative path due to an issue
// with how Quarto resolves certain paths if local image.
// It can also be a url.

atlasHero(nbTitle, hero_url)
```


## `{ojs} keyInsights` {class='key-insights' #key-insight-text}
# `{ojs} heading1` {#example-heading1}

{{< include _template_plot.qmd >}} 

<!-- The above ^  {{< include path.qmd >}} alows for modular import of code. 
This is performed on build, so there are no performance implications, 
but be aware of that the global namespaces are shared, so the same variable
or module imported in each will result in an error -->

{{< lipsum 2 >}}

# `{ojs} heading2` {#example-heading2}

{{< lipsum 2 >}}

# `{ojs} heading3` {#example-heading3}

{{< lipsum 1 >}}

# `{ojs} heading4` {#example-heading4}

{{< lipsum 1 >}}

# `{ojs} nbSummary` {#summary}

{{< lipsum 1 >}}

# `{ojs} appendix` {#appendix}


```{ojs}

toc_bottom = atlasTOC({
  skip: ['notebook-title', 'appendix', 'source-code'], // These should be the section headings in the {# headings} 
  heading: `<b>${Lang.toSentenceCase(_lang(general_translations.toc))}</b>`
})

htl.html`
      <div class='floating-toc'>
      ${toc_bottom}
      </div>
      `
```

# Source code {#source-code .hidden} 
<!-- 
NOTE:Everything below this point will not appear in the notebook.
This is useful to hide all of the code, master selectors (language, admin level, etc.),
and other things that are needed for the notebook to run but would be messy if
actually appearing in the notebook.
-->


<!-- Text and Language Translations -->
```{ojs}
// This cell is to contain all the headings and the notebook title
nbTitle = _lang({en: "This is a template to build Atlas notebooks", fr: "Ceci est un modèle pour construire des notebooks Atlas"})
// key_insights = _lang({en: "Key Insights", fr: "Résumé"})
heading1 = _lang({en: "Heading 1", fr: "Titre 1"})
heading2 = _lang({en: "Heading 2", fr: "Titre 2"})
heading3 = _lang({en: "Heading 3", fr: "Titre 3"})
heading4 = _lang({en: "Heading 4", fr: "Titre 4"})
nbSummary = _lang({en: "Summary", fr: "Résumé"})
appendix = _lang(general_translations.appendix)
```

```{ojs}

mutable hoverCountry = "SSA" // This mutable is defined here and updated in _template_plot.qmd. It should only be defined once.

keyInsights = {
  let template = _lang({
        en: `This is where some key insights should go, they will be dynamic based on the selections such as country (**:::country:::**) and crop type (**:::cropType:::**)`,
        fr: `Ceci est là où les résumés clés devraient être, ils seront dynamiques en fonction des sélections comme pays (**:::country:::**) et type de culture (**:::cropType:::**)`
  })
  
  let fill_items = [
      { name: "country", value: hoverCountry },
      { name: "cropType", value: _lang({en: 'potatoes', fr: 'pomme de terre'}) }
    ]
  let keyText =  md`${Lang.reduceReplaceTemplateItems(template, fill_items)}`
  return keyText
}

```



```{ojs}
import { lang as Lang } from "/helpers/lang.js"

general_translations = await FileAttachment("/data/shared/generalTranslations.json").json()

languages = [
  { key: "en", label: "English", locale: 'en-US' },
  { key: "fr", label: "Français", locale: 'fr-FR' }
]

defaultLangKey = {
  const name = "lang";
  const list = languages.map((d) => d.key);
  const defaultKey = "en";
  const queryParam = await Lang.getParamFromList({ name, list });
  return queryParam ?? defaultKey;
}

_lang = Lang.lg(masterLanguage.key)

viewof masterLanguage = Inputs.radio(languages, {
  label: "Main language toggle",
  format: (d) => d.key,
  value: languages.find((x) => x.key === defaultLangKey),
})
```


```{ojs}
// import { NavbarLangSelector } from "/helpers/uiComponents.ojs"
function NavbarLangSelector(language_obj, masterLanguage) {
  let navEnd = document.querySelector(".navbar-nav.ms-auto .nav-item.compact");
  if (navEnd) {
    let existingLangSelector = document.getElementById("nav-lang-selector");
    if (!existingLangSelector) {
      let lang_sel = Inputs.bind(
        Inputs.radio(language_obj, {
          label: "",
          format: (d) => d.label
        }),
        viewof masterLanguage
      );
      lang_sel.id = "nav-lang-selector";
      
      // Hack the css together for the observable inputs
      lang_sel.style.display = "flex";
      lang_sel.style.alignItems = "center";
      lang_sel.style.marginLeft = "10px";
      let lang_div = lang_sel.querySelector("div");
      lang_div.style.display = "flex";
      lang_div.style.flexDirection = "column";

      // Insert the new item after the GitHub icon and other elements
      navEnd.parentNode.appendChild(lang_sel);
    }
  }
}

NavbarLangSelector(languages, masterLanguage)
```


```{ojs}
prettyLanguageView = {
  return Inputs.bind(
    Inputs.radio(languages, {
      label: _lang(general_translations.language),
      format: (d) => d.label
    }),
    viewof masterLanguage
  );
}
```



<!-- 

# Prototypes for future use to hack a sidebar into notebooks: 

{.column-margin}

```{ojs}
htl.html`
<style>
.sticky-margin-div {
  position: fixed;
  }
@media (max-width: 768px) {
  .sticky-margin-div {
    position: static;
    }
}
</style>

<div class = "sticky-margin-div">
    <div>
      ${Inputs.radio(languages, {
        label: "Main language toggle",
        format: (d) => d.key,
        value: languages.find((x) => x.key === defaultLangKey),
      })}
    </div>
  </div>`
```

:-:: 

-->

<!-- Floating Sidebar: Self-contained HTML, CSS, and JS -->
<!-- 
<div id="floating-sidebar">

</div>

<style>
  #floating-sidebar {
    position: fixed;
    top: 150px;           /* Distance from top of the page */
    left: 20px;          /* Distance from left of the page */
    width: 260px;        /* Sidebar width */
    min-height: 400px;   /* Minimum height */
    max-height: 80vh;    /* Max height relative to viewport */
    background: #ffffff;
    box-shadow: 0 4px 16px rgba(0,0,0,0.12);
    border-radius: 8px;
    padding: 20px;
    overflow-y: auto;
    z-index: 9999;
    transition: box-shadow 0.2s;
  }
  #floating-sidebar:hover {
    box-shadow: 0 8px 24px rgba(0,0,0,0.18);
  }
  /* Responsive: hide on small screens */
  @media (max-width: 800px) {
    #floating-sidebar {
      display: none;
    }
  }
</style>

<script>
  // Optional: Add any JS for interactivity here
  // Example: Toggle sidebar visibility with a keyboard shortcut (Ctrl+B)
  document.addEventListener('keydown', function(e) {
    if (e.ctrlKey && e.key === 'b') {
      const sidebar = document.getElementById('floating-sidebar');
      sidebar.style.display = (sidebar.style.display === 'none') ? 'block' : 'none';
    }
  });
</script> -->