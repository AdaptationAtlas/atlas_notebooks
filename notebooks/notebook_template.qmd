---
pagetitle: "Atlas Notebook Template"
# license: CC BY
nb-authors: 
  - Brayden Youngberg
  - Pete Stewart
date-created: '2025-02-19'
date-edited: today
---


```{ojs}
import { atlas_hero } from "../helpers/styleBuilders.ojs"

hero_url = "../images/test_im.webp"
atlas_hero(nbTitle, hero_url)
```

<!-- # `{ojs} nbTitle` {class='title' #notebook-title} -->

## `{ojs} keyInsights` {class='key-insights' #key-insight-text}

# `{ojs} heading1` {#example-heading1}

{{< lipsum 1 >}}

{{< lipsum 2 >}}

# `{ojs} heading2` {#example-heading2}

{{< lipsum 2 >}}

# `{ojs} heading3` {#example-heading3}

{{< lipsum 1 >}}

# `{ojs} heading4` {#example-heading4}

{{< lipsum 1 >}}

# `{ojs} nbSummary` {#summary}

{{< lipsum 1 >}}

# `{ojs} appendix` {#appendix}

<b>`{ojs} _lang(general_translations.citation)`:</b>\
Brayden Youngberg, Pete Stewart. `{ojs} nbTitle.` Adaptation Atlas. https://adaptationatlas.cgiar.org/

- `{ojs} _lang(general_translations.license)`: [CC BY 4.0](https://creativecommons.org/licenses/by/4.0/)
- `{ojs} _lang(general_translations.authors)`: {{< meta nb-authors.1 >}}, {{< meta nb-authors.2 >}}
- `{ojs} _lang(general_translations.acknowledgements)`: "we thank everyone who has contributed to this notebook"


```{ojs}
import { atlas_toc } from '../helpers/styleBuilders.ojs'

toc_bottom = atlas_toc({
  skip: ['notebook-title', 'appendix', 'source-code'], // These should be the section headings in the {# headings} 
  heading: `<b>${Lang.toSentenceCase(_lang(general_translations.toc))}</b>`
})

htl.html`
      <div class='floating-toc'>
      ${toc_bottom}
      </div>
      `
```

# Source code {#source-code .hidden} 
<!-- 
Note that everything below this point will not appear in the notebook.
This is useful to hide all of the code, master selectors (language, admin level, etc.),
and other things that are needed for the notebook to run but would be messy if
actually appearing in the notebook.
-->


<!-- Text and Language Translations -->
```{ojs}
// This cell is to contain all the headings and the notebook title
nbTitle = _lang({en: "This is a template to build Atlas notebooks", fr: "Ceci est un modèle pour construire des notebooks Atlas"})
// key_insights = _lang({en: "Key Insights", fr: "Résumé"})
heading1 = _lang({en: "Heading 1", fr: "Titre 1"})
heading2 = _lang({en: "Heading 2", fr: "Titre 2"})
heading3 = _lang({en: "Heading 3", fr: "Titre 3"})
heading4 = _lang({en: "Heading 4", fr: "Titre 4"})
nbSummary = _lang({en: "Summary", fr: "Résumé"})
appendix = _lang(general_translations.appendix)
```

```{ojs}

keyInsights = {
  let template = _lang({
        en: `This is where some key insights should go, they will be dynamic based on the selections such as country (**:::country:::**) and crop type (**:::cropType:::**)`,
        fr: `Ceci est là où les résumés clés devraient être, ils seront dynamiques en fonction des sélections comme pays (**:::country:::**) et type de culture (**:::cropType:::**)`
  })
  let fill_items = [
      { name: "country", value: _lang({en: 'Chad', fr: 'Tchad'}) },
      { name: "cropType", value: _lang({en: 'potatoes', fr: 'pomme de terre'}) }
    ]
  let keyText =  md`${Lang.reduceReplaceTemplateItems(template, fill_items)}`
  return keyText
}

```



```{ojs}
import { Lang } from '../helpers/lang.ojs'

general_translations = await FileAttachment("../helpers/lang_generalTranslations.json").json()

languages = [
  { key: "en", label: "English", locale: 'en-US' },
  { key: "fr", label: "Français", locale: 'fr-FR' }
]

defaultLangKey = {
  const name = "lang";
  const list = languages.map((d) => d.key);
  const defaultKey = "en";
  const queryParam = await Lang.getParamFromList({ name, list });
  return queryParam ?? defaultKey;
}

_lang = Lang.lg(masterLanguage.key)

viewof masterLanguage = Inputs.radio(languages, {
  label: "Main language toggle",
  format: (d) => d.key,
  value: languages.find((x) => x.key === defaultLangKey),
})
```


```{ojs}
function NavbarLangSelector(language_obj, masterLanguage) {
  let navEnd = document.querySelector(".navbar-nav.ms-auto .nav-item.compact");
  if (navEnd) {
    let existingLangSelector = document.getElementById("nav-lang-selector");
    if (!existingLangSelector) {
      let lang_sel = Inputs.bind(
        Inputs.radio(language_obj, {
          label: "",
          format: (d) => d.label
        }),
        viewof masterLanguage
      );
      lang_sel.id = "nav-lang-selector";
      
      // Hack the css together for the observable inputs
      lang_sel.style.display = "flex";
      lang_sel.style.alignItems = "center";
      lang_sel.style.marginLeft = "10px";
      let lang_div = lang_sel.querySelector("div");
      lang_div.style.display = "flex";
      lang_div.style.flexDirection = "column";

      // Insert the new item after the GitHub icon and other elements
      navEnd.parentNode.appendChild(lang_sel);
    }
  }
}
NavbarLangSelector(languages, masterLanguage)
```


```{ojs}
prettyLanguageView = {
  return Inputs.bind(
    Inputs.radio(languages, {
      label: _lang(general_translations.language),
      format: (d) => d.label
    }),
    viewof masterLanguage
  );
}
```



<!-- 

# For future use: 

::: {.column-margin}

```{ojs}
htl.html`
<style>
.sticky-margin-div {
  position: fixed;
  }
@media (max-width: 768px) {
  .sticky-margin-div {
    position: static;
    }
}
</style>

<div class = "sticky-margin-div">
    <div>
      ${Inputs.radio(languages, {
        label: "Main language toggle",
        format: (d) => d.key,
        value: languages.find((x) => x.key === defaultLangKey),
      })}
    </div>
  </div>`
```

::: 

-->