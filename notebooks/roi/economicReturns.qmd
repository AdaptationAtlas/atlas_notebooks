---
pagetitle: "Atlas Notebook Template"
nb-authors:
  - Brayden Youngberg
  - Pete Stewart
date-created: "2025-10-15"
date-edited: today
execute:
  echo: true
format:
  html:
    code-fold: true
    code-summary: "Show the code" ## Add this to global template to make debugging easier.
    css: styles.css
---

```{ojs}
import {
  atlasTOC,
  atlasHero,
  dropdown_section,
} from "/helpers/uiComponents.ojs";

hero_url = "./../../images/default_crop.webp";

atlasHero(nbTitle, hero_url);
```

# `{ojs} nbOverview` {#overview}

```{ojs}
//| echo: false
// Text for overview section
md`${_lang(nbText.overview.blocks.block1)}`;

md`${_lang(nbText.overview.blocks.block2)}`;

md`${_lang(nbText.indicators.irr.overview)}`;

md`${_lang(nbText.indicators.mirr.overview)}`;

md`${_lang(nbText.indicators.npv.overview)}`;

md`${_lang(nbText.indicators.bcr.overview)}`;

md`${_lang(nbText.overview.blocks.block3)}`;

md`${_lang(nbText.overview.blocks.block4)}`;
```

# `{ojs} heading1` {#project-setup}

`{ojs} _lang(nbText.projectSetup.blocks.opener1)`

`{ojs} _lang(nbText.projectSetup.blocks.opener2)`

## `{ojs} _lang(nbText.projectSetup.blocks.costs.h2)`

`{ojs} _lang(nbText.projectSetup.blocks.costs.text)`

```{ojs}
Inputs.text({
  label: makeTooltipLabel({
    labelText: inputOptions_projectCost.label,
    tooltipText: inputOptions_projectCost.tooltip,
  }),
  pattern: inputOptions_projectCost.pattern,
  placeholder: inputOptions_projectCost.placeholder,
  // value: inputOptions_projectCost.valueString
});
```

```{ojs}
viewof inputProjectOptions = {
  const inputProjectCost = Inputs.text({
    label: makeTooltipLabel({
      labelText: inputOptions_projectCost.label,
      tooltipText: inputOptions_projectCost.tooltip
    }),
    pattern: inputOptions_projectCost.pattern,
    placeholder: inputOptions_projectCost.placeholder,
    value: inputOptions_projectCost.valueString
  });
  const inputProjectYears = Inputs.select(inputOptions_projectYears.data, {
    format: (x) => x.label,
    label: makeTooltipLabel({
      labelText: inputOptions_projectYears.label,
      tooltipText: inputOptions_projectYears.tooltip
    })
  });

  return Inputs.form(
    {
      cost: inputProjectCost,
      years:inputProjectYears
    },
    {
      template: (inputs) =>
        htl.html`<div style="display: flex; gap: 3em">${Object.values(
          inputs
        )}</div>`
    }
  );
}

rangeProjectCost = {
  const unpack = Number(inputProjectOptions.cost.replace(/[,|$]/g, ""))
  const number = Number(unpack)
  return number
}
```

```{ojs}
{
  const template = _lang(nbText.projectSetup.blocks.costs.calloutTemplate)
  const templateItems = [
    {name: "money", value: formatUSD({locale: language.locale})(rangeProjectCost)},
    {name: "time", value: inputProjectOptions.years.label},
  ]
  const formatted = Lang.reduceReplaceTemplateItems(template, templateItems)
  return md`${formatted}`
}
```

## `{ojs} _lang(nbText.projectSetup.blocks.impacts.h2)`

`{ojs} _lang(nbText.projectSetup.blocks.impacts.text)`

## Select Parameters

<!-- This is not correct in the notebook as this section
is on production impact, adapotion rate, etc. -->

Choose your model parameters for the analysis.

`{ojs} dropdown_section("Advanced Controls", false, "Stuff for experts")`

# `{ojs} heading2` {#investment-returns}

{{< lipsum 2 >}}

# `{ojs} nbSummary` {#summary}

{{< lipsum 1 >}}

# `{ojs} nbMethods` {#methods}

{{< lipsum 1 >}}

# `{ojs} appendix` {#appendix}

```{ojs}
toc_bottom = atlasTOC({
  skip: ["notebook-title", "appendix", "source-code"], // These should be the section headings in the {# headings}
  heading: `<b>${Lang.toSentenceCase(_lang(general_translations.toc))}</b>`,
});

htl.html`
      <div class='floating-toc'>
      ${toc_bottom}
      </div>
      `;
```

# Source code {#source-code}

<!--TODO: Add .hidden in bracket to hide for production -->

## Data import and cleaning

```{ojs}
// Data loader cell
//TODO: Move this to s3 paths
db = DuckDBClient.of({
  exposure: FileAttachment("/data/economicReturns/exposure_adm_sum_spam20-21_glw420-21.parquet"),
  cv: FileAttachment("/data/economicReturns/faostat_prod_cv.parquet")
})

countries = {
  const country_list = await FileAttachment("/data/shared/atlas_countries.json").json();
  const filteredCountries = country_list
    .filter((c) => c.include && c.iso3c !== "SDN")
    .map(({ include, ...rest }) => rest);
  return filteredCountries;
};

countries
```

## Inputs

```{ojs}
// Defaults and gaurd rails for the inputs
inputOptions_projectCost = {
  return {
    range: [1e6, 5e8],
    label: _lang(nbText.projectSetup.blocks.costs.inputs.costInput.label),
    tooltip: _lang(nbText.projectSetup.blocks.costs.inputs.costInput.tooltip),
    step: 1e5,
    value: 50_000_000,
    format: d3.format('$.3s'),
    outputWidth: 90,
    placeholder: "Ex. $5,000,000",
    pattern: "^[$]?[1-9]+[0-9,$]*$",
    valueString: "$50,000,000"
  }
}

inputOptions_projectYears = {
  const years = _lang(
      nbText.projectSetup.blocks.costs.inputs.projectYearDropdown.terms.year.plural,
  );
  return {
    range: [2, 16],
    data: d3
      .range(2, 16 + 1, 1)
      .map((d) => ({ label: `${d} ${years}`, value: d })),
    label: _lang(nbText.projectSetup.blocks.costs.inputs.projectYearDropdown.label),
    tooltip: _lang(nbText.projectSetup.blocks.costs.inputs.projectYearDropdown.tooltip),
    step: 1,
    value: 8,
    outputWidth: 90
  };
}
```

## Elements

```{ojs}
function makeTooltipLabel({
  labelText = "Dropdown label",
  tooltipText = "Tooltip text",
} = {}) {
  return htl.html`
    <span
      data-title="${tooltipText}"
      style="
        position:relative;
        cursor:pointer;
      "
    >${labelText}</span>
    <style>
      [data-title]:hover::after {
        content: attr(data-title);
        position: absolute;
        left: 0;
        top: 100%;
        background: #efefef;
        color: #333;
        font-size: 14px;
        padding: 6px 10px;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        white-space: nowrap;
        z-index: 9999;
      }
    </style>
  `;
}
```

## Helper Functions

```{ojs}
// Formatting
function formatUSD({ locale = "en-US" } = {}) {
  const formatter = formatNumCompactShort({ locale });

  return (number) => {
    const formattedNum = formatter(number);
    return "$" + formattedNum;
  };
}

// format number, short notation
formatNumCompactShort = ({ locale = "en-US" } = {}) =>
  new Intl.NumberFormat(locale, {
    notation: "compact",
    compactDisplay: "short",
  }).format;
```

## Language

<!-- Text and Language Translations -->

```{ojs}
// This cell is to contain all the headings and the notebook title
nbTitle = _lang({
  en: "Estimate Economic Returns on Adaptation",
  fr: "Estimer les retours sur économiques l'adaptation",
});
// key_insights = _lang({en: "Key Insights", fr: "Résumé"})
nbOverview = _lang({ en: "Overview", fr: "Vue d’Ensemble" });
heading1 = _lang({ en: "Project Set-Up", fr: "Configuration de Project" });
heading2 = _lang({ en: "Investment Returns", fr: "Retours d'Investissements" });
nbSummary = _lang({ en: "Summary", fr: "Résumé" });
nbMethods = _lang({ en: "Methods & Sources", fr: "Méthodes & Sources" });
appendix = _lang(general_translations.appendix);
```

```{ojs}
import { lang as Lang } from "/helpers/lang.js"

general_translations = await FileAttachment("/data/shared/generalTranslations.json").json()

nbText = await FileAttachment("/data/economicReturns/translations.json").json()

languages = [
  { key: "en", label: "English", locale: 'en-US' },
  { key: "fr", label: "Français", locale: 'fr-FR' }
]

defaultLangKey = {
  const name = "lang";
  const list = languages.map((d) => d.key);
  const defaultKey = "en";
  const queryParam = await Lang.getParamFromList({ name, list });
  return queryParam ?? defaultKey;
}

_lang = Lang.lg(masterLanguage.key)

viewof masterLanguage = Inputs.radio(languages, {
  label: "Main language toggle",
  format: (d) => d.key,
  value: languages.find((x) => x.key === defaultLangKey),
})
```

```{ojs}
// import { NavbarLangSelector } from "/helpers/uiComponents.ojs"
function NavbarLangSelector(language_obj, masterLanguage) {
  let navEnd = document.querySelector(".navbar-nav.ms-auto .nav-item.compact");
  if (navEnd) {
    let existingLangSelector = document.getElementById("nav-lang-selector");
    if (!existingLangSelector) {
      let lang_sel = Inputs.bind(
        Inputs.radio(language_obj, {
          label: "",
          format: (d) => d.label
        }),
        viewof masterLanguage
      );
      lang_sel.id = "nav-lang-selector";
      
      // Hack the css together for the observable inputs
      lang_sel.style.display = "flex";
      lang_sel.style.alignItems = "center";
      lang_sel.style.marginLeft = "10px";
      let lang_div = lang_sel.querySelector("div");
      lang_div.style.display = "flex";
      lang_div.style.flexDirection = "column";

      // Insert the new item after the GitHub icon and other elements
      navEnd.parentNode.appendChild(lang_sel);
    }
  }
}

NavbarLangSelector(languages, masterLanguage)
```

```{ojs}
prettyLanguageView = {
  return Inputs.bind(
    Inputs.radio(languages, {
      label: _lang(general_translations.language),
      format: (d) => d.label
    }),
    viewof masterLanguage
  );
}
```

<!--

# Prototypes for future use to hack a sidebar into notebooks:

{.column-margin}

```{ojs}
htl.html`
<style>
.sticky-margin-div {
  position: fixed;
  }
@media (max-width: 768px) {
  .sticky-margin-div {
    position: static;
    }
}
</style>

<div class = "sticky-margin-div">
    <div>
      ${Inputs.radio(languages, {
        label: "Main language toggle",
        format: (d) => d.key,
        value: languages.find((x) => x.key === defaultLangKey),
      })}
    </div>
  </div>`
```

:-::

-->

<!-- Floating Sidebar: Self-contained HTML, CSS, and JS -->
<!--
<div id="floating-sidebar">

</div>

<style>
  #floating-sidebar {
    position: fixed;
    top: 150px;           /* Distance from top of the page */
    left: 20px;          /* Distance from left of the page */
    width: 260px;        /* Sidebar width */
    min-height: 400px;   /* Minimum height */
    max-height: 80vh;    /* Max height relative to viewport */
    background: #ffffff;
    box-shadow: 0 4px 16px rgba(0,0,0,0.12);
    border-radius: 8px;
    padding: 20px;
    overflow-y: auto;
    z-index: 9999;
    transition: box-shadow 0.2s;
  }
  #floating-sidebar:hover {
    box-shadow: 0 8px 24px rgba(0,0,0,0.18);
  }
  /* Responsive: hide on small screens */
  @media (max-width: 800px) {
    #floating-sidebar {
      display: none;
    }
  }
</style>

<script>
  // Optional: Add any JS for interactivity here
  // Example: Toggle sidebar visibility with a keyboard shortcut (Ctrl+B)
  document.addEventListener('keydown', function(e) {
    if (e.ctrlKey && e.key === 'b') {
      const sidebar = document.getElementById('floating-sidebar');
      sidebar.style.display = (sidebar.style.display === 'none') ? 'block' : 'none';
    }
  });
</script> -->
