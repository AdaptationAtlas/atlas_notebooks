---
pagetitle: "Composite Vulnerability Index Section"
nb-authors: 
  - Johnson Mwakazi
  - Pete Stewart
  - Brayden Youngberg
date-created: '2025-02-19'
date-edited: today
css: styles.css
---

```{ojs}
compositeVulnerabilityQuestion = _lang(vulnerability_translations.composite_vulnerability_question)
```

# `{ojs} compositeVulnerabilityQuestion ` {#composite-vulnerability}

`{ojs} _lang(vulnerability_translations.composite_vulnerability_description)`

```{ojs}
// Controls section
compositeControlsForm = {
  const componentOptions = [
    {value: "all", label: _lang(vulnerability_translations.composite_index)},
    {value: "exposure", label: _lang(vulnerability_translations.exposure_component)},
    {value: "sensitivity", label: _lang(vulnerability_translations.sensitivity_component)},
    {value: "adaptive_capacity", label: _lang(vulnerability_translations.adaptive_capacity_component)}
  ];

  const adminInputs = [
    Inputs.select(dataAdmin0, { 
      label: adminRegions.labels.admin0, 
      format: x => x.label,
      value: dataAdmin0[0]
    }),
    Inputs.select(dataAdmin1, { 
      label: adminRegions.labels.admin1, 
      format: x => x.label,
      value: dataAdmin1[0]
    }),
    Inputs.select(dataAdmin2, { 
      label: adminRegions.labels.admin2, 
      format: x => x.label,
      value: dataAdmin2[0]
    })
  ];

  const componentInputs = [
    Inputs.select(componentOptions, {
      label: _lang(vulnerability_translations.vulnerability_component),
      format: d => d.label,
      value: componentOptions[0]
    })
  ];

  return htl.html`${adminFormTemplate(adminInputs)}${controlsFormTemplate(componentInputs)}`;
}
```

```{ojs}
// Generate synthetic composite index data
compositeIndexData = {
  // Generate synthetic data for demonstration
  const countries = ["Kenya", "Ethiopia", "Nigeria", "Tanzania", "Uganda", "Rwanda", "Malawi", "Zambia"];
  
  const data = countries.map((country, i) => {
    // Generate scores (0-1 scale, higher = more vulnerable)
    const exposureScore = 0.3 + Math.random() * 0.4; // 0.3-0.7
    const sensitivityScore = 0.2 + Math.random() * 0.5; // 0.2-0.7
    const adaptiveCapacityScore = 0.1 + Math.random() * 0.6; // 0.1-0.7 (inverted - higher means less adaptive)
    
    // Composite vulnerability index (simple average)
    const vulnerabilityIndex = (exposureScore + sensitivityScore + adaptiveCapacityScore) / 3;
    
    return {
      admin0_name: country,
      admin1_name: null,
      admin2_name: null,
      vulnerability_index: vulnerabilityIndex,
      exposure_score: exposureScore,
      sensitivity_score: sensitivityScore,
      adaptive_capacity_score: 1 - adaptiveCapacityScore, // Invert for display (higher = better adaptive capacity)
      rank: i + 1 // Will be recalculated after sorting
    };
  });
  
  // Sort by vulnerability index and assign ranks
  data.sort((a, b) => b.vulnerability_index - a.vulnerability_index);
  data.forEach((d, i) => d.rank = i + 1);
  
  return data;
}

// Filter data based on current selection
filteredCompositeData = {
  let data = [...compositeIndexData];
  
  if (selectedAdmin0) {
    data = data.filter(d => d.admin0_name === selectedAdmin0);
  }
  
  // For this prototype, we only have country-level data
  // In production, this would include admin1 and admin2 filtering
  
  return data;
}
```

```{ojs}
// Create small multiples visualization
function createCompositeVizualization(data, component = "all") {
  if (!data || data.length === 0) {
    return createNoDataState(_lang(vulnerability_translations.no_data_available));
  }

  const width = mapWidth;
  const height = 500;
  const padding = 60;
  
  // For small multiples, we'll create a 2x2 grid
  const components = [
    { key: "vulnerability_index", label: _lang(vulnerability_translations.composite_index) },
    { key: "exposure_score", label: _lang(vulnerability_translations.exposure_component) },
    { key: "sensitivity_score", label: _lang(vulnerability_translations.sensitivity_component) },
    { key: "adaptive_capacity_score", label: _lang(vulnerability_translations.adaptive_capacity_component) }
  ];
  
  // Filter components based on selection
  const displayComponents = component === "all" ? components : components.filter(c => c.key.includes(component));
  
  const svg = d3.create("svg")
    .attr("width", width)
    .attr("height", height)
    .attr("viewBox", [0, 0, width, height])
    .style("font", "12px sans-serif");

  // Calculate layout
  const cols = Math.min(2, displayComponents.length);
  const rows = Math.ceil(displayComponents.length / cols);
  const cellWidth = (width - padding * 2) / cols;
  const cellHeight = (height - padding * 2) / rows;
  
  displayComponents.forEach((comp, i) => {
    const col = i % cols;
    const row = Math.floor(i / cols);
    const x = padding + col * cellWidth;
    const y = padding + row * cellHeight;
    
    // Create scale for this component
    const maxValue = d3.max(data, d => d[comp.key]);
    const scale = d3.scaleLinear()
      .domain([0, maxValue])
      .range([0, cellWidth - 40]);
    
    const barHeight = 20;
    const barSpacing = 30;
    
    // Create group for this component
    const g = svg.append("g")
      .attr("transform", `translate(${x}, ${y})`);
    
    // Add title
    g.append("text")
      .attr("x", cellWidth / 2)
      .attr("y", 20)
      .attr("text-anchor", "middle")
      .attr("font-weight", "bold")
      .attr("font-size", "14px")
      .text(comp.label);
    
    // Add bars
    const bars = g.selectAll(".bar")
      .data(data.slice(0, Math.min(8, data.length))) // Show top 8
      .join("g")
      .attr("class", "bar")
      .attr("transform", (d, i) => `translate(0, ${40 + i * barSpacing})`);
    
    // Bar background
    bars.append("rect")
      .attr("width", cellWidth - 40)
      .attr("height", barHeight)
      .attr("fill", "#f3f4f6")
      .attr("stroke", "#e5e7eb");
    
    // Bar fill
    bars.append("rect")
      .attr("width", d => scale(d[comp.key]))
      .attr("height", barHeight)
      .attr("fill", d => {
        if (comp.key === "adaptive_capacity_score") {
          // For adaptive capacity, higher is better (green)
          return d3.interpolateRdYlGn(d[comp.key]);
        } else {
          // For others, lower is better (reverse scale)
          return d3.interpolateRdYlGn(1 - d[comp.key]);
        }
      });
    
    // Country labels
    bars.append("text")
      .attr("x", 5)
      .attr("y", barHeight / 2)
      .attr("dy", "0.35em")
      .attr("font-size", "10px")
      .attr("font-weight", "500")
      .text(d => d.admin0_name);
    
    // Value labels
    bars.append("text")
      .attr("x", d => scale(d[comp.key]) + 5)
      .attr("y", barHeight / 2)
      .attr("dy", "0.35em")
      .attr("font-size", "10px")
      .text(d => d[comp.key].toFixed(2));
  });

  return svg.node();
}

compositeVisualization = {
  const viz = createCompositeVizualization(filteredCompositeData, selectedComponent);
  
  return htl.html`
    <div style="
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      padding: 20px;
      background-color: #fff;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      margin: 16px 0;
    ">
      <div style="margin-bottom: 16px;">
        <h4 style="margin: 0 0 8px 0; font-size: 16px; font-weight: 600;">
          ${_lang({en: "Vulnerability Index Components", fr: "Composantes de l'indice de vulnérabilité"})}
        </h4>
        <p style="margin: 0; font-size: 14px; color: #6b7280;">
          ${_lang({en: "Colors range from green (low vulnerability/high adaptive capacity) to red (high vulnerability/low adaptive capacity).", fr: "Les couleurs vont du vert (faible vulnérabilité/haute capacité d'adaptation) au rouge (haute vulnérabilité/faible capacité d'adaptation)."})}
        </p>
      </div>
      ${viz}
    </div>
  `;
}
```

```{ojs}
// Ranking table
compositeRankingTable = {
  if (!filteredCompositeData || filteredCompositeData.length === 0) {
    return createNoDataState();
  }

  const data = filteredCompositeData.slice(0, 10); // Top 10
  
  return htl.html`
    <div style="
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      padding: 20px;
      background-color: #fff;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      margin: 16px 0;
    ">
      <h4 style="margin: 0 0 16px 0; font-size: 16px; font-weight: 600;">
        ${_lang({en: "Vulnerability Rankings", fr: "Classements de vulnérabilité"})}
      </h4>
      <div style="overflow-x: auto;">
        <table style="width: 100%; border-collapse: collapse; font-size: 14px;">
          <thead>
            <tr style="background-color: #f9fafb; border-bottom: 2px solid #e5e7eb;">
              <th style="padding: 12px; text-align: left; font-weight: 600;">${_lang({en: "Rank", fr: "Rang"})}</th>
              <th style="padding: 12px; text-align: left; font-weight: 600;">${_lang({en: "Region", fr: "Région"})}</th>
              <th style="padding: 12px; text-align: center; font-weight: 600;">${_lang({en: "Vulnerability Index", fr: "Indice de vulnérabilité"})}</th>
              <th style="padding: 12px; text-align: center; font-weight: 600;">${_lang({en: "Exposure", fr: "Exposition"})}</th>
              <th style="padding: 12px; text-align: center; font-weight: 600;">${_lang({en: "Sensitivity", fr: "Sensibilité"})}</th>
              <th style="padding: 12px; text-align: center; font-weight: 600;">${_lang({en: "Adaptive Capacity", fr: "Capacité d'adaptation"})}</th>
            </tr>
          </thead>
          <tbody>
            ${data.map(d => htl.html`
              <tr style="border-bottom: 1px solid #e5e7eb;">
                <td style="padding: 12px; font-weight: 600;">${d.rank}</td>
                <td style="padding: 12px;">${d.admin0_name}</td>
                <td style="padding: 12px; text-align: center;">
                  <span style="
                    padding: 4px 8px;
                    border-radius: 4px;
                    background-color: ${d.vulnerability_index > 0.6 ? '#fecaca' : d.vulnerability_index > 0.4 ? '#fed7aa' : '#bbf7d0'};
                    color: ${d.vulnerability_index > 0.6 ? '#dc2626' : d.vulnerability_index > 0.4 ? '#ea580c' : '#16a34a'};
                    font-weight: 600;
                  ">
                    ${d.vulnerability_index.toFixed(2)}
                  </span>
                </td>
                <td style="padding: 12px; text-align: center;">${d.exposure_score.toFixed(2)}</td>
                <td style="padding: 12px; text-align: center;">${d.sensitivity_score.toFixed(2)}</td>
                <td style="padding: 12px; text-align: center;">${d.adaptive_capacity_score.toFixed(2)}</td>
              </tr>
            `)}
          </tbody>
        </table>
      </div>
    </div>
  `;
}
```

```{ojs}
// Download functionality
compositeDownloadButton = {
  if (!filteredCompositeData || filteredCompositeData.length === 0) {
    return htl.html``;
  }
  
  return downloadButton(
    filteredCompositeData, 
    `composite_vulnerability_${getAdminSelection().replace(/\s+/g, '_')}`,
    _lang(vulnerability_translations.download_data)
  );
}
```

```{ojs}
// Dynamic insights
compositeInsights = {
  if (!filteredCompositeData || filteredCompositeData.length === 0) {
    return createNoDataState();
  }

  const data = filteredCompositeData[0]; // Focus on top-ranked (most vulnerable)
  const totalRegions = compositeIndexData.length;
  
  // Generate recommendations based on component scores
  let recommendations = [];
  if (data.exposure_score > 0.6) {
    recommendations.push(_lang({en: "hazard risk reduction", fr: "réduction des risques de dangers"}));
  }
  if (data.sensitivity_score > 0.5) {
    recommendations.push(_lang({en: "social protection programs", fr: "programmes de protection sociale"}));
  }
  if (data.adaptive_capacity_score < 0.4) {
    recommendations.push(_lang({en: "capacity building initiatives", fr: "initiatives de renforcement des capacités"}));
  }
  
  const region = getAdminSelection();
  const score = data.vulnerability_index.toFixed(2);
  const rank = data.rank;
  const recText = recommendations.length > 0 ? recommendations.join(", ") : _lang({en: "continued monitoring", fr: "surveillance continue"});
  
  const template = _lang(vulnerability_translations.composite_insight_template);
  const replacements = [
    { name: "region", value: region },
    { name: "rank", value: rank },
    { name: "total", value: totalRegions },
    { name: "score", value: score },
    { name: "recommendations", value: recText }
  ];
  
  const insight = generateInsight(template, replacements);
  return createInsightDisplay(insight);
}
```

```{ojs}
// Display components
compositeControlsForm
compositeVisualization
compositeRankingTable
compositeDownloadButton
compositeInsights
```
