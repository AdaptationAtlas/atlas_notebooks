---
pagetitle: "State"
nb-authors: 
  - Johnson Mwakazi
  - Pete Stewart
  - Brayden Youngberg
  - Pete Stewart
date-created: '2025-02-19'
date-edited: today
---

```{ojs}
// mutable state
mutable hoverCountry = "SSA" 


```

```{ojs}

globalSelection = {
  return {
    label: "Sub-Saharan Africa",
    labelGeneral: "Africa"
  }
}

adminRegions = {
  return {
    labels: {
      admin0: 'Country',
      admin1: 'Region',
      admin2: 'Subregion'
    }
  };
}

languages = [
  { key: "en", label: "English", locale: 'en-US' },
  { key: "fr", label: "FranÃ§ais", locale: 'fr-FR' }
]

defaultLangKey = {
  const name = "lang";
  const list = languages.map((d) => d.key);
  const defaultKey = "en";
  const queryParam = await Lang.getParamFromList({ name, list });
  return queryParam ?? defaultKey;
}

_lang = Lang.lg(masterLanguage.key)
```


```{ojs}

boundaries = {
  const input0 = await FileAttachment("/data/shared/atlas_gaul_a0_africa_simple-vlowres.topojson").json()
  const input1 = await FileAttachment("/data/shared/atlas_gaul_a1_africa_simple-vlowres.topojson").json()
  const input2 = await FileAttachment("/data/shared/atlas_gaul_a2_africa_simple-lowres.topojson").json()

  const geo = {
    admin0: {
      ...topojson.feature(input0, input0.objects["atlas_gaul_a0_africa"]),
      features: topojson.feature(input0, input0.objects["atlas_gaul_a0_africa"]).features.filter(feature => feature.properties.admin0_name !== "Sudan")
    },
    admin1: {
      ...topojson.feature(input1, input1.objects["atlas_gaul_a1_africa"]),
      features: topojson.feature(input1, input1.objects["atlas_gaul_a1_africa"]).features.filter(feature => feature.properties.admin0_name !== "Sudan")
    },
    admin2: {
      ...topojson.feature(input2, input2.objects["atlas_gaul_a2_africa_simple-lowres"]),
      features: topojson.feature(input2, input2.objects["atlas_gaul_a2_africa_simple-lowres"]).features.filter(feature => feature.properties.admin0_name !== "Sudan")
    }
  }
  
  return geo
}


```


```{ojs}
dataAdmin0 = {
  const data = boundaries.admin0.features.map(d => d.properties)
  // add a blank value
  return [null, ...data.map(d => d.admin0_name)].map(d => {
    return {label: d == null ? globalSelection.label : d, value: d}
  })
}

dataAdmin1 = {
  // admin 1, filter by 0 
  const data = boundaries.admin1.features.map(d => d.properties)
  .filter(d => d.admin0_name == selectAdmin0.value)
  // add blank value
  return [null, ...data.map(d => d.admin1_name)].map(d => {
    return {label: d, value: d}
  })
}

dataAdmin2 = {
  const data = boundaries.admin2.features.map(d => d.properties)
  .filter(d => d.admin0_name == selectAdmin0.value && d.admin1_name == selectAdmin1.value)
  // add blank value
  return [null, ...data.map(d => d.admin2_name)].map(d => {
    return {label: d, value: d}
  })
}


```


