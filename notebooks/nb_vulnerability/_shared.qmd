---
pagetitle: "Shared State and Utilities"
nb-authors: 
  - Johnson Mwakazi
  - Pete Stewart
  - Brayden Youngberg
date-created: '2025-02-19'
date-edited: today
---

```{ojs}
// Note: Core imports are now handled in the main notebook file
// This avoids import conflicts when using {{< include >}}
sharedImportsNote = "Imports handled in main notebook"
```

```{ojs}
// Global configuration and mutable state
mapWidth = 625
mapHeight = 600

// Mutable state for cross-section reactivity
mutable selectedAdmin0 = null
mutable selectedAdmin1 = null
mutable selectedAdmin2 = null
mutable selectedHazard = "any"
mutable selectedGender = "All"
mutable sortByGap = false
mutable selectedComponent = "all"
mutable icicleCurrentLevel = []
mutable icicleZoomedData = null
```

```{ojs}
// Language configuration
languages = [
  { key: "en", label: "English", locale: 'en-US' },
  { key: "fr", label: "FranÃ§ais", locale: 'fr-FR' }
]

defaultLangKey = {
  const name = "lang";
  const list = languages.map((d) => d.key);
  const defaultKey = "en";
  const queryParam = await Lang.getParamFromList({ name, list });
  return queryParam ?? defaultKey;
}

_lang = Lang.lg(masterLanguage.key)

globalSelection = {
  return {
    label: _lang({en: "Sub-Saharan Africa", fr: "Afrique subsaharienne"}),
    labelGeneral: _lang({en: "Africa", fr: "Afrique"})
  }
}
```

```{ojs}
// Admin region configuration
adminRegions = {
  return {
    labels: {
      admin0: _lang(vulnerability_translations.country),
      admin1: _lang(vulnerability_translations.region),
      admin2: _lang(vulnerability_translations.subregion)
    }
  };
}

// Get current admin selections as reactive object
adminSelections = ({
  selectAdmin0: selectedAdmin0,
  selectAdmin1: selectedAdmin1,
  selectAdmin2: selectedAdmin2
})
```

```{ojs}
// Data loading utilities - simplified for prototype
// For production, this would be replaced with S3-based data loading

// Load S3 configuration
s3Config = await FileAttachment("/data/vulnerability_notebook/S3_data.json").json()

// Helper function to create DuckDB connection with exposure data
async function createExposureDB() {
  try {
    const parquetUrl = await FileAttachment("/data/vulnerability_notebook/notebook_exposure.parquet").url();
    const db = await DuckDBClient.of();
    await db.query(`
      CREATE OR REPLACE VIEW exposure_data AS
      SELECT * FROM read_parquet('${parquetUrl}')
    `);
    return db;
  } catch (error) {
    console.error("Error loading exposure data:", error);
    return null;
  }
}
```

```{ojs}
// Boundary data loading
boundaries = {
  const input0 = await FileAttachment("/data/shared/atlas_gaul_a0_africa_simple-vlowres.topojson").json()
  const input1 = await FileAttachment("/data/shared/atlas_gaul_a1_africa_simple-vlowres.topojson").json()
  const input2 = await FileAttachment("/data/shared/atlas_gaul_a2_africa_simple-lowres.topojson").json()

  const geo = {
    admin0: {
      ...topojson.feature(input0, input0.objects["atlas_gaul_a0_africa"]),
      features: topojson.feature(input0, input0.objects["atlas_gaul_a0_africa"]).features.filter(feature => feature.properties.admin0_name !== "Sudan")
    },
    admin1: {
      ...topojson.feature(input1, input1.objects["atlas_gaul_a1_africa"]),
      features: topojson.feature(input1, input1.objects["atlas_gaul_a1_africa"]).features.filter(feature => feature.properties.admin0_name !== "Sudan")
    },
    admin2: {
      ...topojson.feature(input2, input2.objects["atlas_gaul_a2_africa_simple-lowres"]),
      features: topojson.feature(input2, input2.objects["atlas_gaul_a2_africa_simple-lowres"]).features.filter(feature => feature.properties.admin0_name !== "Sudan")
    }
  }
  
  return geo
}
```

```{ojs}
// Static admin level data for inputs - non-reactive to prevent dropdown flickering
staticDataAdmin0 = [
  {label: "All countries", value: null},
  {label: "Burundi", value: "Burundi"},
  {label: "Kenya", value: "Kenya"},
  {label: "Uganda", value: "Uganda"},
  {label: "Tanzania", value: "Tanzania"},
  {label: "Rwanda", value: "Rwanda"}
]

staticDataAdmin1 = [
  {label: "All regions", value: null},
  {label: "Northern", value: "Northern"},
  {label: "Central", value: "Central"},
  {label: "Southern", value: "Southern"},
  {label: "Eastern", value: "Eastern"},
  {label: "Western", value: "Western"},
  {label: "Coastal", value: "Coastal"}
]

staticDataAdmin2 = [
  {label: "All districts", value: null},
  {label: "District A", value: "District A"},
  {label: "District B", value: "District B"},
  {label: "District C", value: "District C"},
  {label: "District D", value: "District D"},
  {label: "District E", value: "District E"}
]
```

```{ojs}
// Reactive admin selector data generators (for visualization data filtering)
dataAdmin0 = {
  const data = boundaries.admin0.features.map(d => d.properties)
  return [null, ...data.map(d => d.admin0_name)].map(d => {
    return {label: d == null ? globalSelection.label : d, value: d}
  })
}

dataAdmin1 = {
  if (!selectedAdmin0) return [{label: "", value: null}];
  const data = boundaries.admin1.features.map(d => d.properties)
    .filter(d => d.admin0_name == selectedAdmin0)
  return [null, ...data.map(d => d.admin1_name)].map(d => {
    return {label: d ?? "", value: d}
  })
}

dataAdmin2 = {
  if (!selectedAdmin0 || !selectedAdmin1) return [{label: "", value: null}];
  const data = boundaries.admin2.features.map(d => d.properties)
    .filter(d => d.admin0_name == selectedAdmin0 && d.admin1_name == selectedAdmin1)
  return [null, ...data.map(d => d.admin2_name)].map(d => {
    return {label: d ?? "", value: d}
  })
}
```

```{ojs}
// Utility functions for data binding and formatting
/**
 * Bind tabular data to geographic features
 */
function bindTabularToGeo({
  data = [],
  dataBindColumn = 'dataBindColumn',
  geoData = [],
  geoDataBindColumn = 'geoDataBindColumn'
}) {
  const index = new Map(data.map(d => [d[dataBindColumn], d]))
  const geojson = JSON.parse(JSON.stringify(geoData))
  
  for (const f of geojson.features) {
    f.properties.data = index.get(f.properties[geoDataBindColumn]);
  }
  return geojson;
}

/**
 * Get the most granular admin selection made
 */
function getAdminSelection(selections = adminSelections) {
  const a0 = selections.selectAdmin0
  const a1 = selections.selectAdmin1
  const a2 = selections.selectAdmin2
  const global = globalSelection.label

  return a2 ? a2 : a1 ? a1 : a0 ? a0 : global
}

/**
 * Get the appropriate admin level label based on current selection
 */
function getLowerLevelAdminLabel(selections = adminSelections) {
  if (selections.selectAdmin2) return adminRegions.labels.admin2
  if (selections.selectAdmin1) return adminRegions.labels.admin2
  if (selections.selectAdmin0) return adminRegions.labels.admin1
  else return adminRegions.labels.admin0
}

/**
 * Filter geographic features based on admin selections
 */
function filterGeoBySelection(geoFeatures, selections = adminSelections) {
  return geoFeatures.filter(feature => {
    const props = feature.properties;
    
    if (selections.selectAdmin2) {
      return props.admin0_name === selections.selectAdmin0 &&
             props.admin1_name === selections.selectAdmin1 &&
             props.admin2_name === selections.selectAdmin2;
    } else if (selections.selectAdmin1) {
      return props.admin0_name === selections.selectAdmin0 &&
             props.admin1_name === selections.selectAdmin1;
    } else if (selections.selectAdmin0) {
      return props.admin0_name === selections.selectAdmin0;
    }
    
    return true; // Show all if no selection
  });
}
```

```{ojs}
// Formatting utilities
function formatUSD(number) {
  return new Intl.NumberFormat("en-US", {
    notation: "compact",
    compactDisplay: "short",
    style: "currency",
    currency: "usd"
  }).format(number);
}

function formatIntDollar(number, unit = intDollarUnit.replace('$', '')) {
  let formattedNumber = formatUSD(number);
  let intDollar = unit + formattedNumber
  return intDollar
}

function formatCurrency(value) {
  if (value == null || isNaN(value)) return "N/A";
  return new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
    notation: "compact",
    compactDisplay: "short"
  }).format(value);
}

function formatPercent(value, decimals = 0) {
  if (value == null || isNaN(value)) return "N/A";
  return new Intl.NumberFormat("en-US", {
    style: "percent",
    minimumFractionDigits: decimals,
    maximumFractionDigits: decimals
  }).format(value / 100);
}

function formatNumber(value, decimals = 1) {
  if (value == null || isNaN(value)) return "N/A";
  return new Intl.NumberFormat("en-US", {
    minimumFractionDigits: decimals,
    maximumFractionDigits: decimals
  }).format(value);
}

formatNumCompactShort = new Intl.NumberFormat("en-US", {
  notation: "compact",
  compactDisplay: "short",
  style: "currency",
  currency: "USD"
}).format

formatNumCompactLong = new Intl.NumberFormat("en-US", {
  notation: "compact",
  compactDisplay: "long",
  unitDisplay: "long"
}).format

formatPercentNoSymbol = (d) => {
  if (d === undefined || d === null) return d
  else return d3.format('.0f')(d)
}

formatPercentWhole = (d) => {
  if (d === undefined || d === null) return d
  else return d3.format('.0%')(d)
}

formatPercentTenth = (d) => {
  if (d === undefined || d === null) return d
  else return d3.format('.1%')(d)
}

transformPercent = (d) => {
  if (d === undefined || d === null) return d
  else return d * 100
}
```

```{ojs}
// Color scales and themes
colorScales = {
  return {
    range: {
      green: ['#E4F5D0', '#015023'],
      blue: ['#E8F2FF', '#003E6B'],
      brown: ['#FFFDE5', '#A87B00'],
      yellowGreen: ['#F7D732', '#216729'],
      orangeRed: ['#F4BB21', '#EC5A47'],
      redOrange: ['#FEE0D2', '#CB4335'],
      vulnerability: ['#2E8B57', '#FFD700', '#FF6347'], // Low, Medium, High
      adaptive: ['#FF6B6B', '#4ECDC4', '#45B7D1'] // Poor, Fair, Good
    },
    unknown: "#ccc",
    noData: "#f0f0f0"
  }
}

// Vulnerability index color scale
vulnerabilityColorScale = d3.scaleSequential()
  .domain([0, 1])
  .interpolator(d3.interpolateRdYlBu)
  .clamp(true)

// Adaptive capacity color scale  
adaptiveCapacityColorScale = d3.scaleThreshold()
  .domain([0.3, 0.6, 0.8])
  .range(['#d73027', '#fee08b', '#abdda4', '#2166ac'])
```

```{ojs}
// Constants and metadata
intDollarUnit = `${intDollarYear} Int$`
intDollarYear = 2005

vopNote = {
  return {
    caption: _lang(vulnerability_translations.vopNoteCaption),
    blurb: _lang(vulnerability_translations.vopNoteBlurb)
  }
}

// Hazard type options
hazardTypes = [
  {value: "drought", label: _lang(vulnerability_translations.hazard_drought)},
  {value: "heat-stress", label: _lang(vulnerability_translations.hazard_heat_stress)},
  {value: "any", label: _lang(vulnerability_translations.hazard_any)}
]

// Gender filter options
genderOptions = [
  {value: "All", label: _lang(vulnerability_translations.show_all_genders)},
  {value: "Male", label: _lang(vulnerability_translations.show_male)},
  {value: "Female", label: _lang(vulnerability_translations.show_female)}
]
```

```{ojs}
// Form templates and styling - Fixed to properly render inputs
adminFormTemplate = (admin0Input, admin1Input, admin2Input) => htl.html`
<div style="
  background: #f8fafc;
  border: 2px solid #e2e8f0;
  border-radius: 12px;
  padding: 24px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07);
  margin: 16px 0;
">
  <h3 style="margin: 0 0 20px 0; color: #2d3748; font-size: 1.1rem; font-weight: 600;">
    ${_lang(vulnerability_translations.geographic_selection)}
  </h3>
  <div style="
    display: flex;
    align-items: flex-start;
    gap: 20px;
    flex-wrap: nowrap;
    justify-content: space-between;
  " class="form-inputs-container">
    <div style="flex: 1; min-width: 180px;">${admin0Input}</div>
    <div style="flex: 1; min-width: 180px;">${admin1Input}</div>
    <div style="flex: 1; min-width: 180px;">${admin2Input}</div>
  </div>
</div>
`

controlsFormTemplate = (...inputs) => htl.html`
<div style="
  background: #ffffff;
  border: 1px solid #e5e7eb;
  border-radius: 8px;
  padding: 16px;
  margin: 12px 0;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
">
  <div style="
    display: flex;
    align-items: center;
    gap: 16px;
    flex-wrap: wrap;
  " class="controls-container">
    ${inputs.map(input => htl.html`<div>${input}</div>`)}
  </div>
</div>
`
```

```{ojs}
// Error handling and loading states
function createLoadingState(message = null) {
  return htl.html`
    <div style="
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 40px;
      color: #6b7280;
      font-style: italic;
    ">
      <div style="margin-right: 12px;">
        <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
          <path d="M10 2a8 8 0 100 16 8 8 0 000-16zM8 11a1 1 0 112 0v3a1 1 0 11-2 0v-3zm1-1a1 1 0 100-2 1 1 0 000 2z"/>
        </svg>
      </div>
      ${message || _lang(vulnerability_translations.loading)}
    </div>
  `;
}

function createErrorState(message) {
  return htl.html`
    <div style="
      background: #fef2f2;
      border: 1px solid #fecaca;
      border-radius: 8px;
      padding: 16px;
      margin: 16px 0;
      color: #dc2626;
    ">
      <strong>Error:</strong> ${message}
    </div>
  `;
}

function createNoDataState(message = null) {
  return htl.html`
    <div style="
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 40px;
      background: #f9fafb;
      border: 2px dashed #d1d5db;
      border-radius: 8px;
      color: #6b7280;
      text-align: center;
    ">
      <div>
        <div style="margin-bottom: 8px; font-size: 18px;">ð</div>
        <div>${message || _lang(vulnerability_translations.no_data_available)}</div>
      </div>
    </div>
  `;
}
```

```{ojs}
// Insight generation utilities
/**
 * Generate dynamic insights with template replacement
 */
function generateInsight(template, replacements) {
  return Lang.reduceReplaceTemplateItems(template, replacements);
}

/**
 * Create insight display component
 */
function createInsightDisplay(insight) {
  return htl.html`
    <div style="
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 20px;
      border-radius: 10px;
      margin: 16px 0;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    ">
      <h4 style="margin: 0 0 12px 0; font-size: 16px; font-weight: 600;">
        ${_lang(vulnerability_translations.quick_insights)}
      </h4>
      <p style="margin: 0; font-size: 14px; line-height: 1.5; opacity: 0.95;">
        ${insight}
      </p>
    </div>
  `;
}
```