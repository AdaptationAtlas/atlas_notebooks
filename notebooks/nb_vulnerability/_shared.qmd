---
pagetitle: "State"
nb-authors: 
  - Johnson Mwakazi
  - Pete Stewart
  - Brayden Youngberg
  - Pete Stewart
date-created: '2025-02-19'
date-edited: today
---

```{ojs}
// mutable state
mutable hoverCountry = "SSA" 
mapWidth = 625


```

```{ojs}

globalSelection = {
  return {
    label: "Sub-Saharan Africa",
    labelGeneral: "Africa"
  }
}

adminRegions = {
  return {
    labels: {
      admin0: 'Country',
      admin1: 'Admin 1',
      admin2: 'Admin 2'
    }
  };
}



languages = [
  { key: "en", label: "English", locale: 'en-US' },
  { key: "fr", label: "FranÃ§ais", locale: 'fr-FR' }
]

defaultLangKey = {
  const name = "lang";
  const list = languages.map((d) => d.key);
  const defaultKey = "en";
  const queryParam = await Lang.getParamFromList({ name, list });
  return queryParam ?? defaultKey;
}

_lang = Lang.lg(masterLanguage.key)
```


```{ojs}

boundaries = {
  const input0 = await FileAttachment("/data/shared/atlas_gaul_a0_africa_simple-vlowres.topojson").json()
  const input1 = await FileAttachment("/data/shared/atlas_gaul_a1_africa_simple-vlowres.topojson").json()
  const input2 = await FileAttachment("/data/shared/atlas_gaul_a2_africa_simple-lowres.topojson").json()

  const geo = {
    admin0: {
      ...topojson.feature(input0, input0.objects["atlas_gaul_a0_africa"]),
      features: topojson.feature(input0, input0.objects["atlas_gaul_a0_africa"]).features.filter(feature => feature.properties.admin0_name !== "Sudan")
    },
    admin1: {
      ...topojson.feature(input1, input1.objects["atlas_gaul_a1_africa"]),
      features: topojson.feature(input1, input1.objects["atlas_gaul_a1_africa"]).features.filter(feature => feature.properties.admin0_name !== "Sudan")
    },
    admin2: {
      ...topojson.feature(input2, input2.objects["atlas_gaul_a2_africa_simple-lowres"]),
      features: topojson.feature(input2, input2.objects["atlas_gaul_a2_africa_simple-lowres"]).features.filter(feature => feature.properties.admin0_name !== "Sudan")
    }
  }
  
  return geo
}


```


```{ojs}
dataAdmin0 = {
  const data = boundaries.admin0.features.map(d => d.properties)
  // add a blank value
  return [null, ...data.map(d => d.admin0_name)].map(d => {
    return {label: d == null ? globalSelection.label : d, value: d}
  })
}

dataAdmin1 = {
  // admin 1, filter by 0 
  const data = boundaries.admin1.features.map(d => d.properties)
  .filter(d => d.admin0_name == selectAdmin0.value)
  // add blank value
  return [null, ...data.map(d => d.admin1_name)].map(d => {
    return {label: d, value: d}
  })
}

dataAdmin2 = {
  const data = boundaries.admin2.features.map(d => d.properties)
  .filter(d => d.admin0_name == selectAdmin0.value && d.admin1_name == selectAdmin1.value)
  // add blank value
  return [null, ...data.map(d => d.admin2_name)].map(d => {
    return {label: d, value: d}
  })
}


```




```{ojs}
function bindTabularToGeo({
  data = [],
  dataBindColumn = 'dataBindColumn',
  geoData = [],
  geoDataBindColumn = 'geoDataBindColumn'
}) {
  // bind data to geojson
  const index = new Map(data.map(d => [d[dataBindColumn], d])) // map data by dataBindColumn
  const geojson = JSON.parse(JSON.stringify(geoData)); // do a copy, rather than mutate
  // join up data to geojson
  for (const f of geojson.features) {
    f.properties.data = index.get(f.properties[geoDataBindColumn]);
  }
  return geojson;
}




```


```{ojs}

function formatUSD(number) {
  return new Intl.NumberFormat("en-US", {
    notation: "compact",
    compactDisplay: "short",
    style: "currency",
    currency: "usd"
  }).format(number);
}


```


```{ojs}

// format US currency
function formatIntDollar(number, unit=intDollarUnit.replace('$', '')) {
  let formattedNumber = formatUSD(number);
  let intDollar = unit + formattedNumber
  return intDollar
}


```


```{ojs}

colorScales = {
  return {
    range: {
      green: ['#E4F5D0', '#015023'],
      blue: ['#E8F2FF', '#003E6B'],
      brown: ['#FFFDE5', '#A87B00'],
      yellowGreen: ['#F7D732', '#216729'],
      orangeRed: ['#F4BB21', '#EC5A47'],
    },
    unknown: "#ccc"
  }
}


```



```{ojs}
viewof toggleCustomStyling = Inputs.toggle({label: "Use custom styling", value: true})


```



```{ojs}
formatNumCompactShort = new Intl.NumberFormat("en-US", {
  notation: "compact",
  compactDisplay: "short",
}).format


```


```{ojs}
// format number, long notation
formatNumCompactLong = new Intl.NumberFormat("en-US", {
  notation: "compact",
  compactDisplay: "long",
  unitDisplay: "long"
}).format


```


```{ojs}

intDollarUnit = `${intDollarYear} Int$` // full unit for international dollars
intDollarYear = 2005 // year of international year data

formatPercentNoSymbol = (d) => {
  if (d === undefined || d === null) return d
  else return d3.format('.0f')(d)
}

// format non-number as percent
formatPercentWhole = (d) => {
  if (d === undefined || d === null) return d
  else return d3.format('.0%')(d)
}


// format non-number as percent
formatPercentTenth = (d) => {
  if (d === undefined || d === null) return d
  else return d3.format('.1%')(d)
}


// transform non-number to percent value
transformPercent = (d) => {
  if (d === undefined || d === null) return d
  else return d * 100
}

vopNote = {
  return {
    caption: `Monetary VoP values are represented in 2005 international dollars.`, // note about VoP source for captions
    blurb: `VoP, 2005 [international dollars](https://en.wikipedia.org/wiki/International_dollar)` // narrative info, with link to wiki
  }
}


function getLowerLevelAdminLabel(selections=adminSelections) {
  // based on admin selection, get the lower level label 
  if (selections.selectAdmin2) return adminRegions.labels.admin2
  if (selections.selectAdmin1) return adminRegions.labels.admin2
  if (selections.selectAdmin0) return adminRegions.labels.admin1
  else return adminRegions.labels.admin0
}

```