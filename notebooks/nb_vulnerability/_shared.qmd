---
pagetitle: "State"
nb-authors: 
  - Johnson Mwakazi
  - Pete Stewart
  - Brayden Youngberg
  - Pete Stewart
date-created: '2025-02-19'
date-edited: today
---

```{ojs}
// mutable state
mutable hoverCountry = "SSA" 
mapWidth = 625


```

```{ojs}

// options for the global admin selection
// used when no admin selection is made
globalSelection = {
  return {
    label: "Sub-Saharan Africa",
    labelGeneral: "Africa"
  }
}




languages = [
  { key: "en", label: "English", locale: 'en-US' },
  { key: "fr", label: "FranÃ§ais", locale: 'fr-FR' }
]

defaultLangKey = {
  const name = "lang";
  const list = languages.map((d) => d.key);
  const defaultKey = "en";
  const queryParam = await Lang.getParamFromList({ name, list });
  return queryParam ?? defaultKey;
}

_lang = Lang.lg(masterLanguage.key)
```







```{ojs}
function bindTabularToGeo({
  data = [],
  dataBindColumn = 'dataBindColumn',
  geoData = [],
  geoDataBindColumn = 'geoDataBindColumn'
}) {
  // bind data to geojson
  const index = new Map(data.map(d => [d[dataBindColumn], d])) // map data by dataBindColumn
  const geojson = JSON.parse(JSON.stringify(geoData)); // do a copy, rather than mutate
  // join up data to geojson
  for (const f of geojson.features) {
    f.properties.data = index.get(f.properties[geoDataBindColumn]);
  }
  return geojson;
}




```


```{ojs}

function formatUSD(number) {
  return new Intl.NumberFormat("en-US", {
    notation: "compact",
    compactDisplay: "short",
    style: "currency",
    currency: "usd"
  }).format(number);
}


```


```{ojs}

// format US currency
function formatIntDollar(number, unit=intDollarUnit.replace('$', '')) {
  let formattedNumber = formatUSD(number);
  let intDollar = unit + formattedNumber
  return intDollar
}


```


```{ojs}

colorScales = {
  return {
    range: {
      green: ['#E4F5D0', '#015023'],
      blue: ['#E8F2FF', '#003E6B'],
      brown: ['#FFFDE5', '#A87B00'],
      yellowGreen: ['#F7D732', '#216729'],
      orangeRed: ['#F4BB21', '#EC5A47'],
    },
    unknown: "#ccc"
  }
}


```



```{ojs}

formatNumCompactShort = new Intl.NumberFormat("en-US", {
  notation: "compact",
  compactDisplay: "short",
  style: "currency",
  currency: "USD"
}).format


```


```{ojs}
// format number, long notation
formatNumCompactLong = new Intl.NumberFormat("en-US", {
  notation: "compact",
  compactDisplay: "long",
  unitDisplay: "long"
}).format


```


```{ojs}

intDollarUnit = `${intDollarYear} Int$` // full unit for international dollars
intDollarYear = 2005 // year of international year data

formatPercentNoSymbol = (d) => {
  if (d === undefined || d === null) return d
  else return d3.format('.0f')(d)
}

// format non-number as percent
formatPercentWhole = (d) => {
  if (d === undefined || d === null) return d
  else return d3.format('.0%')(d)
}


// format non-number as percent
formatPercentTenth = (d) => {
  if (d === undefined || d === null) return d
  else return d3.format('.1%')(d)
}


// transform non-number to percent value
transformPercent = (d) => {
  if (d === undefined || d === null) return d
  else return d * 100
}

vopNote = {
  return {
    caption: `Monetary VoP values are represented in 2005 international dollars.`, // note about VoP source for captions
    blurb: `VoP, 2005 [international dollars](https://en.wikipedia.org/wiki/International_dollar)` // narrative info, with link to wiki
  }
}


function getLowerLevelAdminLabel(selections=adminSelections) {
  // based on admin selection, get the lower level label 
  if (selections.selectAdmin2) return adminRegions.labels.admin2
  if (selections.selectAdmin1) return adminRegions.labels.admin2
  if (selections.selectAdmin0) return adminRegions.labels.admin1
  else return adminRegions.labels.admin0
}

```