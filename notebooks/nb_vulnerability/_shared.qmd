---
pagetitle: "Shared State and Utilities"
nb-authors:
  - Johnson Mwakazi
  - Pete Stewart
  - Brayden Youngberg
date-created: '2025-02-19'
date-edited: today
---

```{ojs}
// Note: Core imports are now handled in the main notebook file
// This avoids import conflicts when using {{< include >}}
sharedImportsNote = "Imports handled in main notebook";
```

```{ojs}
// Global configuration and mutable state
mapWidth = 625
mapHeight = 600

// Mutable state for cross-section reactivity
mutable selectedAdmin0 = null
mutable selectedAdmin1 = null
mutable selectedAdmin2 = null
mutable selectedHazard = "any"
mutable selectedGender = "All"
mutable sortByGap = false
mutable selectedComponent = "all"
mutable icicleCurrentLevel = []
mutable icicleZoomedData = null
```

```{ojs}
// Language configuration
languages = [
  { key: "en", label: "English", locale: 'en-US' },
  { key: "fr", label: "FranÃ§ais", locale: 'fr-FR' }
]

defaultLangKey = {
  const name = "lang";
  const list = languages.map((d) => d.key);
  const defaultKey = "en";
  const queryParam = await Lang.getParamFromList({ name, list });
  return queryParam ?? defaultKey;
}

_lang = Lang.lg(masterLanguage.key)

globalSelection = {
  return {
    label: _lang({en: "Sub-Saharan Africa", fr: "Afrique subsaharienne"}),
    labelGeneral: _lang({en: "Africa", fr: "Afrique"}),
 
  }
}
```

```{ojs}
// Admin region configuration
adminRegions = {
  return {
    labels: {
      admin0: _lang(vulnerability_translations.country),
      admin1: _lang(vulnerability_translations.region),
      admin2: _lang(vulnerability_translations.subregion)
    }
  };
}

// Get current admin selections as reactive object
adminSelections = ({
  selectAdmin0: selectAdmin0,
  selectAdmin1: selectAdmin1,
  selectAdmin2: selectAdmin2
})
```

```{ojs}
// Simplified data loading with caching (no lazy loading for now)
// Global cache for shared data to avoid redundant loads
mutable dataCache = new Map()

// Load S3 configuration
s3Config = await FileAttachment(
	"/data/vulnerability_notebook/S3_data.json",
).json();

// Simple cached data loader
async function loadDataWithCache(key, loader) {
  if (dataCache.has(key)) {
    console.log(`Cache hit: ${key}`);
    return dataCache.get(key);
  }
  
  try {
    const startTime = performance.now();
    console.log(`Loading data: ${key}`);
    
    const data = await loader();
    
    const loadTime = performance.now() - startTime;
    console.log(`Loaded ${key} in ${loadTime.toFixed(2)}ms`);
    
    dataCache.set(key, data);
    return data;
  } catch (error) {
    console.error(`Error loading ${key}:`, error);
    return null;
  }
}

// Helper function to create DuckDB connection with exposure data
async function createExposureDB() {
  return loadDataWithCache('exposureDB', async () => {
    const parquetUrl = await FileAttachment(
      "/data/vulnerability_notebook/notebook_exposure.parquet",
    ).url();
    const db = await DuckDBClient.of();
    await db.query(`
      CREATE OR REPLACE VIEW exposure_data AS
      SELECT * FROM read_parquet('${parquetUrl}')
    `);
    return db;
  });
}
```

```{ojs}
// Cached boundary data loading
boundaries = {
  return loadDataWithCache('boundaries', async () => {
    const input0 = await FileAttachment("/data/shared/atlas_gaul_a0_africa_simple-vlowres.topojson").json()
    const input1 = await FileAttachment("/data/shared/atlas_gaul_a1_africa_simple-vlowres.topojson").json()
    const input2 = await FileAttachment("/data/shared/atlas_gaul_a2_africa_simple-lowres.topojson").json()

    const geo = {
      admin0: {
        ...topojson.feature(input0, input0.objects["atlas_gaul24_a0_africa"]),
        features: topojson.feature(input0, input0.objects["atlas_gaul24_a0_africa"]).features
      },
      admin1: {
        ...topojson.feature(input1, input1.objects["atlas_gaul_a1_africa"]),
        features: topojson.feature(input1, input1.objects["atlas_gaul_a1_africa"]).features
      },
      admin2: {
        ...topojson.feature(input2, input2.objects["atlas_gaul_a2_africa_simple-lowres"]),
        features: topojson.feature(input2, input2.objects["atlas_gaul_a2_africa_simple-lowres"]).features
      }
    }
    
    return geo
  });
}
```

```{ojs}
dataAdmin0 = {
  const data = boundaries.admin0.features.map(d => d.properties)
  // add a blank value and sort alphabetically
  return [null, ...data.map(d => d.admin0_name)].map(d => {
    return {label: d == null ? globalSelection.label : d, value: d}
  }).sort((a, b) => {
    // Keep null/blank value at the top
    if (a.value === null) return -1;
    if (b.value === null) return 1;
    // Sort others alphabetically by label
    return a.label.localeCompare(b.label);
  })
}

dataAdmin1 = {
  // admin 1, filter by 0 
  const data = boundaries.admin1.features.map(d => d.properties)
  .filter(d => d.admin0_name == selectAdmin0?.value)
  // add blank value and sort alphabetically
  return [null, ...data.map(d => d.admin1_name)].map(d => {
    return {label: d, value: d}
  }).sort((a, b) => {
    // Keep null/blank value at the top
    if (a.value === null) return -1;
    if (b.value === null) return 1;
    // Sort others alphabetically by label
    return a.label.localeCompare(b.label);
  })
}

dataAdmin2 = {
  const data = boundaries.admin2.features.map(d => d.properties)
  .filter(d => d.admin0_name == selectAdmin0?.value && d.admin1_name == selectAdmin1?.value)
  // add blank value and sort alphabetically
  return [null, ...data.map(d => d.admin2_name)].map(d => {
    return {label: d, value: d}
  }).sort((a, b) => {
    // Keep null/blank value at the top
    if (a.value === null) return -1;
    if (b.value === null) return 1;
    // Sort others alphabetically by label
    return a.label.localeCompare(b.label);
  })
}
```

```{ojs}
sensitivityDataAdmin0 = {
  const data = boundaries.admin0.features.map(d => d.properties)
  // add a blank value and sort alphabetically
  return [null, ...data.map(d => d.admin0_name)].map(d => {
    return {label: d == null ? globalSelection.label : d, value: d || "SSA"}
  }).sort((a, b) => {
    // Keep null/blank value at the top
    if (a.value === "SSA") return -1;
    if (b.value === "SSA") return 1;
    // Sort others alphabetically by label
    return a.label.localeCompare(b.label);
  })
}


sensitivityDataAdmin1 = {
  // admin 1, filter by 0 
  const data = boundaries.admin1.features.map(d => d.properties)
  .filter(d => d.admin0_name == sensitivityAdmin0?.value)
  // add blank value and sort alphabetically
  return [null, ...data.map(d => d.admin1_name)].map(d => {
    return {label: d, value: d}
  }).sort((a, b) => {
    // Keep null/blank value at the top
    if (a.value === null) return -1;
    if (b.value === null) return 1;
    // Sort others alphabetically by label
    return a.label.localeCompare(b.label);
  })
}


sensitivityDataAdmin2 = {
  const data = boundaries.admin2.features.map(d => d.properties)
  .filter(d => d.admin0_name == sensitivityAdmin0?.value && d.admin1_name == sensitivityAdmin1?.value)
  // add blank value and sort alphabetically
  return [null, ...data.map(d => d.admin2_name)].map(d => {
    return {label: d, value: d}
  }).sort((a, b) => {
    // Keep null/blank value at the top
    if (a.value === null) return -1;
    if (b.value === null) return 1;
    // Sort others alphabetically by label
    return a.label.localeCompare(b.label);
  })
}
```

```{ojs}
compositeDataAdmin0 = {
  const data = boundaries.admin0.features.map(d => d.properties)
  // add a blank value and sort alphabetically
  return [null, ...data.map(d => d.admin0_name)].map(d => {
    return {label: d == null ? globalSelection.label : d, value: d || "SSA"}
  }).sort((a, b) => {
    // Keep null/blank value at the top
    if (a.value === "SSA") return -1;
    if (b.value === "SSA") return 1;
    // Sort others alphabetically by label
    return a.label.localeCompare(b.label);
  })
}


compositeDataAdmin1 = {
  // admin 1, filter by 0 
  const data = boundaries.admin1.features.map(d => d.properties)
  .filter(d => d.admin0_name == compositeAdmin0?.value)
  // add blank value and sort alphabetically
  return [null, ...data.map(d => d.admin1_name)].map(d => {
    return {label: d, value: d}
  }).sort((a, b) => {
    // Keep null/blank value at the top
    if (a.value === null) return -1;
    if (b.value === null) return 1;
    // Sort others alphabetically by label
    return a.label.localeCompare(b.label);
  })
}


compositeDataAdmin2 = {
  const data = boundaries.admin2.features.map(d => d.properties)
  .filter(d => d.admin0_name == compositeAdmin0?.value && d.admin1_name == compositeAdmin1?.value)
  // add blank value and sort alphabetically
  return [null, ...data.map(d => d.admin2_name)].map(d => {
    return {label: d, value: d}
  }).sort((a, b) => {
    // Keep null/blank value at the top
    if (a.value === null) return -1;
    if (b.value === null) return 1;
    // Sort others alphabetically by label
    return a.label.localeCompare(b.label);
  })
}
```

```{ojs}
adaptiveCapacityDataAdmin0 = {
  const data = boundaries.admin0.features.map(d => d.properties)
  // add a blank value and sort alphabetically
  return [null, ...data.map(d => d.admin0_name)].map(d => {
   return {label: d == null ? globalSelection.label : d, value: d || "SSA"}
  }).sort((a, b) => {
    // Keep null/blank value at the top
    if (a.value === "SSA") return -1;
    if (b.value === "SSA") return 1;
    // Sort others alphabetically by label
    return a.label.localeCompare(b.label);
  })
}


adaptiveCapacityDataAdmin1 = {
  // admin 1, filter by 0 
  const data = boundaries.admin1.features.map(d => d.properties)
  .filter(d => d.admin0_name == adaptiveCapacityAdmin0?.value)
  // add blank value and sort alphabetically
  return [null, ...data.map(d => d.admin1_name)].map(d => {
    return {label: d, value: d}
  }).sort((a, b) => {
    // Keep null/blank value at the top
    if (a.value === null) return -1;
    if (b.value === null) return 1;
    // Sort others alphabetically by label
    return a.label.localeCompare(b.label);
  })
}


adaptiveCapacityDataAdmin2 = {
  const data = boundaries.admin2.features.map(d => d.properties)
  .filter(d => d.admin0_name == adaptiveCapacityAdmin0?.value && d.admin1_name == adaptiveCapacityAdmin1?.value)
  // add blank value and sort alphabetically
  return [null, ...data.map(d => d.admin2_name)].map(d => {
    return {label: d, value: d}
  }).sort((a, b) => {
    // Keep null/blank value at the top
    if (a.value === null) return -1;
    if (b.value === null) return 1;
    // Sort others alphabetically by label
    return a.label.localeCompare(b.label);
  })
}
```

```{ojs}
// Utility functions for data binding and formatting
/**
 * Bind tabular data to geographic features
 */
function bindTabularToGeo({
	data = [],
	dataBindColumn = "dataBindColumn",
	geoData = [],
	geoDataBindColumn = "geoDataBindColumn",
}) {
	const index = new Map(data.map((d) => [d[dataBindColumn], d]));
	const geojson = JSON.parse(JSON.stringify(geoData));

	for (const f of geojson.features) {
		f.properties.data = index.get(f.properties[geoDataBindColumn]);
	}
	return geojson;
}

/**
 * Get the most granular admin selection made
 */

function getExposureAdminSelection() {
	const a0 = selectAdmin0.value;
	const a1 = selectAdmin1.value;
	const a2 = selectAdmin2.value;
	const global = "Sub-Saharan Africa";

	return a2 ? a2 : a1 ? a1 : a0 ? a0 : global;
}

function getAdminSelection() {
	const a0 = sensitivityAdmin0.value;
	const a1 = sensitivityAdmin1.value;
	const a2 = sensitivityAdmin2.value;
	const global = "SSA";

	return a2 ? a2 : a1 ? a1 : a0 ? a0 : global;
}

function getSensitivityAdminSelection() {
	const a0 = sensitivityAdmin0.value;
	const a1 = sensitivityAdmin0.value;
	const a2 = sensitivityAdmin0.value;
	const global = "SSA";

	return a2 ? a2 : a1 ? a1 : a0 ? a0 : global;
}

/**
 * Get the appropriate admin level label based on current selection
 */
function getLowerLevelAdminLabel(selections = adminSelections) {
	if (selectAdmin2.value) return adminRegions.labels.admin2;
	if (selectAdmin1.value) return adminRegions.labels.admin2;
	if (selectAdmin0.value) return adminRegions.labels.admin1;
	else return adminRegions.labels.admin0;
}

/**
 * Filter geographic features based on admin selections
 */
function filterGeoBySelection(geoFeatures, selections = adminSelections) {
	return geoFeatures.filter((feature) => {
		const props = feature.properties;

		if (selectAdmin2.value) {
			return (
				props.admin0_name === selectAdmin0.value &&
				props.admin1_name === selectAdmin1.value &&
				props.admin2_name === selectAdmin2.value
			);
		} else if (selections.selectAdmin1) {
			return (
				props.admin0_name === selectAdmin0.value &&
				props.admin1_name === selectAdmin1.value
			);
		} else if (selectAdmin0.value) {
			return props.admin0_name === selectAdmin0.value;
		}

		return true; // Show all if no selection
	});
}
```

```{ojs}
// Formatting utilities
function formatUSD(number) {
	return new Intl.NumberFormat("en-US", {
		notation: "compact",
		compactDisplay: "short",
		style: "currency",
		currency: "usd",
	}).format(number);
}

function formatIntDollar(number, unit = intDollarUnit.replace("$", "")) {
	let formattedNumber = formatUSD(number);
	let intDollar = unit + formattedNumber;
	return intDollar;
}

function formatCurrency(value) {
	if (value == null || isNaN(value)) return "N/A";
	return new Intl.NumberFormat("en-US", {
		style: "currency",
		currency: "USD",
		notation: "compact",
		compactDisplay: "short",
	}).format(value);
}

function formatPercent(value, decimals = 0) {
	if (value == null || isNaN(value)) return "N/A";
	return new Intl.NumberFormat("en-US", {
		style: "percent",
		minimumFractionDigits: decimals,
		maximumFractionDigits: decimals,
	}).format(value / 100);
}

function formatNumber(value, decimals = 1) {
	if (value == null || isNaN(value)) return "N/A";
	return new Intl.NumberFormat("en-US", {
		minimumFractionDigits: decimals,
		maximumFractionDigits: decimals,
	}).format(value);
}

formatNumCompactShort = new Intl.NumberFormat("en-US", {
	notation: "compact",
	compactDisplay: "short",
	style: "currency",
	currency: "USD",
}).format;

formatNumCompactLong = new Intl.NumberFormat("en-US", {
	notation: "compact",
	compactDisplay: "long",
	unitDisplay: "long",
}).format;

formatPercentNoSymbol = (d) => {
	if (d === undefined || d === null) return d;
	else return d3.format(".0f")(d);
};

formatPercentWhole = (d) => {
	if (d === undefined || d === null) return d;
	else return d3.format(".0%")(d);
};

formatPercentTenth = (d) => {
	if (d === undefined || d === null) return d;
	else return d3.format(".1%")(d);
};

transformPercent = (d) => {
	if (d === undefined || d === null) return d;
	else return d * 100;
};
```

```{ojs}
// Color scales and themes
colorScales = {
  return {
    range: {
      green: ['#E4F5D0', '#015023'],
      blue: ['#E8F2FF', '#003E6B'],
      brown: ['#FFFDE5', '#A87B00'],
      yellowGreen: ['#216729', '#F7D732'], // Reversed: green (low/good) to yellow (high/bad)
      orangeRed: ['#F4BB21', '#EC5A47'],
      redOrange: ['#FEE0D2', '#CB4335'],
      vulnerability: ['#2E8B57', '#FFD700', '#FF6347'], // Low, Medium, High
      adaptive: ['#FF6B6B', '#4ECDC4', '#45B7D1'] // Poor, Fair, Good
    },
    unknown: "#f0f0f0",
    noData: "#f0f0f0"
  }
}

// Vulnerability index color scale
vulnerabilityColorScale = d3.scaleSequential()
  .domain([0, 1])
  .interpolator(d3.interpolateRdYlBu)
  .clamp(true)

// Adaptive capacity color scale  
adaptiveCapacityColorScale = d3.scaleThreshold()
  .domain([0.3, 0.6, 0.8])
  .range(['#d73027', '#fee08b', '#abdda4', '#2166ac'])
```

```{ojs}
// Constants and metadata
intDollarUnit = `${intDollarYear} Int$`
intDollarYear = 2005

vopNote = {
  return {
    caption: _lang(vulnerability_translations.vopNoteCaption),
    blurb: _lang(vulnerability_translations.vopNoteBlurb)
  }
}

// Hazard type options
hazardTypes = [
  {value: "drought", label: _lang(vulnerability_translations.hazard_drought)},
  {value: "heat-stress", label: _lang(vulnerability_translations.hazard_heat_stress)},
  {value: "any", label: _lang(vulnerability_translations.hazard_any)}
]

// Gender filter options
genderOptions = [
  {value: "All", label: _lang(vulnerability_translations.show_all_genders)},
  {value: "Male", label: _lang(vulnerability_translations.show_male)},
  {value: "Female", label: _lang(vulnerability_translations.show_female)}
]
```

```{ojs}
// Form templates and styling - Fixed to properly render inputs
adminFormTemplate = (admin0Input, admin1Input, admin2Input) => htl.html`
<div style="
  background: #f8fafc;
  border: 2px solid #e2e8f0;
  border-radius: 12px;
  padding: 24px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07);
  margin: 16px 0;
">
  <h3 style="margin: 0 0 20px 0; color: #2d3748; font-size: 1.1rem; font-weight: 600;">
    ${_lang(vulnerability_translations.geographic_selection)}
  </h3>
  <div style="
    display: flex;
    align-items: flex-start;
    gap: 20px;
    flex-wrap: nowrap;
    justify-content: space-between;
  " class="form-inputs-container">
    <div style="flex: 1; min-width: 180px;">${admin0Input}</div>
    <div style="flex: 1; min-width: 180px;">${admin1Input}</div>
    <div style="flex: 1; min-width: 180px;">${admin2Input}</div>
  </div>
</div>
`;

controlsFormTemplate = (...inputs) => htl.html`
<div style="
  background: #ffffff;
  border: 1px solid #e5e7eb;
  border-radius: 8px;
  padding: 16px;
  margin: 12px 0;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
">
  <div style="
    display: flex;
    align-items: center;
    gap: 16px;
    flex-wrap: wrap;
  " class="controls-container">
    ${inputs.map((input) => htl.html`<div>${input}</div>`)}
  </div>
</div>
`;
```

```{ojs}
// Skeleton loading components
function createSkeletonMap() {
  return htl.html`
    <div style="
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      padding: 20px;
      background-color: #fff;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      margin: 16px 0;
    ">
      <div class="skeleton-map" style="
        width: 100%;
        height: 400px;
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: skeleton-loading 1.5s infinite;
        border-radius: 4px;
        position: relative;
      ">
        <div style="
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          color: #9ca3af;
          font-size: 14px;
        ">Loading map...</div>
      </div>
      <div style="margin-top: 12px; display: flex; gap: 8px;">
        <div class="skeleton-legend" style="
          width: 60px;
          height: 20px;
          background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
          background-size: 200% 100%;
          animation: skeleton-loading 1.5s infinite;
          border-radius: 4px;
        "></div>
        <div class="skeleton-legend" style="
          width: 100px;
          height: 20px;
          background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
          background-size: 200% 100%;
          animation: skeleton-loading 1.5s infinite;
          border-radius: 4px;
        "></div>
      </div>
    </div>
    <style>
      @keyframes skeleton-loading {
        0% { background-position: 200% 0; }
        100% { background-position: -200% 0; }
      }
    </style>
  `;
}

function createSkeletonChart() {
  return htl.html`
    <div style="
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      padding: 20px;
      background-color: #fff;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      margin: 16px 0;
    ">
      <div style="display: flex; flex-direction: column; gap: 12px;">
        ${Array.from({length: 5}, (_, i) => htl.html`
          <div style="display: flex; align-items: center; gap: 12px;">
            <div class="skeleton-bar-label" style="
              width: 120px;
              height: 16px;
              background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
              background-size: 200% 100%;
              animation: skeleton-loading 1.5s infinite;
              border-radius: 4px;
            "></div>
            <div class="skeleton-bar" style="
              width: ${Math.random() * 200 + 100}px;
              height: 24px;
              background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
              background-size: 200% 100%;
              animation: skeleton-loading 1.5s infinite;
              border-radius: 4px;
            "></div>
          </div>
        `)}
      </div>
      <div style="
        position: relative;
        text-align: center;
        color: #9ca3af;
        font-size: 14px;
        margin-top: 20px;
      ">Loading chart...</div>
    </div>
    <style>
      @keyframes skeleton-loading {
        0% { background-position: 200% 0; }
        100% { background-position: -200% 0; }
      }
    </style>
  `;
}

function createSkeletonIcicle() {
  return htl.html`
    <div style="
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      padding: 20px;
      background-color: #fff;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      margin: 16px 0;
    ">
      <div style="
        width: 100%;
        height: 350px;
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: skeleton-loading 1.5s infinite;
        border-radius: 4px;
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
      ">
        <div style="color: #9ca3af; font-size: 14px;">Loading icicle plot...</div>
      </div>
      <div style="margin-top: 12px; display: flex; gap: 8px;">
        <div style="
          width: 300px;
          height: 30px;
          background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
          background-size: 200% 100%;
          animation: skeleton-loading 1.5s infinite;
          border-radius: 4px;
        "></div>
      </div>
    </div>
    <style>
      @keyframes skeleton-loading {
        0% { background-position: 200% 0; }
        100% { background-position: -200% 0; }
      }
    </style>
  `;
}

function createSkeletonComposite() {
  return htl.html`
    <div style="
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      width: 100%;
      max-width: 100%;
      padding: 16px;
      background: #f8fafc;
      border-radius: 8px;
      border: 1px solid #e5e7eb;
    ">
      <!-- Main composite map skeleton -->
      <div style="width: 100%; margin-bottom: 20px;">
        <div style="
          width: 100%;
          height: 300px;
          background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
          background-size: 200% 100%;
          animation: skeleton-loading 1.5s infinite;
          border-radius: 8px;
          display: flex;
          align-items: center;
          justify-content: center;
        ">
          <div style="color: #9ca3af; font-size: 14px;">Loading composite map...</div>
        </div>
      </div>
      
      <!-- Component maps grid skeleton -->
      <div style="
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        gap: 16px;
        width: 100%;
      ">
        ${Array.from({length: 3}, (_, i) => htl.html`
          <div style="display: flex; flex-direction: column; align-items: center;">
            <div style="
              width: 100%;
              height: 250px;
              background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
              background-size: 200% 100%;
              animation: skeleton-loading 1.5s infinite;
              border-radius: 8px;
            "></div>
          </div>
        `)}
      </div>
    </div>
    <style>
      @keyframes skeleton-loading {
        0% { background-position: 200% 0; }
        100% { background-position: -200% 0; }
      }
    </style>
  `;
}

// Error handling and loading states
function createLoadingState(message = null) {
	return htl.html`
    <div style="
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 40px;
      color: #6b7280;
      font-style: italic;
    ">
      <div style="margin-right: 12px;">
        <div class="spinner" style="
          width: 20px;
          height: 20px;
          border: 2px solid #e5e7eb;
          border-top: 2px solid #3b82f6;
          border-radius: 50%;
          animation: spin 1s linear infinite;
        "></div>
      </div>
      ${message || _lang(vulnerability_translations.loading)}
    </div>
    <style>
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
    </style>
  `;
}


function createErrorState(message) {
	return htl.html`
    <div style="
      background: #fef2f2;
      border: 1px solid #fecaca;
      border-radius: 8px;
      padding: 16px;
      margin: 16px 0;
      color: #dc2626;
    ">
      <strong>Error:</strong> ${message}
    </div>
  `;
}

function createNoDataState(message = null) {
	return htl.html`
    <div style="
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 40px;
      background: #f9fafb;
      border: 2px dashed #d1d5db;
      border-radius: 8px;
      color: #6b7280;
      text-align: center;
      margin-top: 16px;
    ">
      <div>
        <div style="margin-bottom: 8px; font-size: 18px;">ð</div>
        <div>${message || _lang(vulnerability_translations.no_data_available)}</div>
      </div>
    </div>
  `;
}
```

```{ojs}
// Insight generation utilities
/**
 * Generate dynamic insights with template replacement
 */
function generateInsight(template, replacements) {
	return Lang.reduceReplaceTemplateItems(template, replacements);
}

/**
 * Create insight display component
 */
function createInsightDisplay(insight) {
	return htl.html`
    <div style="
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 20px;
      border-radius: 10px;
      margin: 16px 0;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    ">
      <h4 style="margin: 0 0 12px 0; font-size: 16px; font-weight: 600;">
        ${_lang(vulnerability_translations.quick_insights)}
      </h4>
      <p style="margin: 0; font-size: 18px; line-height: 1.5; opacity: 0.95;">
        ${insight}
      </p>
    </div>
  `;
}
```
