---
pagetitle: "Sensitivity Section"
nb-authors: 
  - Johnson Mwakazi
  - Pete Stewart
  - Brayden Youngberg
date-created: '2025-02-19'
date-edited: today
css: styles.css
---

```{ojs}
sensitivityQuestion = _lang(vulnerability_translations.sensitivity_question)
```

# `{ojs} sensitivityQuestion ` {#sensitivity}

`{ojs} _lang(vulnerability_translations.sensitivity_description)`

```{ojs}
// Controls section - Use simple form display
sensitivityControlsForm = {
  const adminInputs = [
    Inputs.select(dataAdmin0, { 
      label: adminRegions.labels.admin0, 
      format: x => x.label,
      value: dataAdmin0[0]
    }),
    Inputs.select(dataAdmin1, { 
      label: adminRegions.labels.admin1, 
      format: x => x.label,
      value: dataAdmin1[0]
    }),
    Inputs.select(dataAdmin2, { 
      label: adminRegions.labels.admin2, 
      format: x => x.label,
      value: dataAdmin2[0]
    })
  ];

  return adminFormTemplate(adminInputs);
}
```

```{ojs}
// Load icicle metadata and data
icicleKeys = await FileAttachment("/data/vulnerability_notebook/vulnerability_iciclekeys.json").json()
sensitivityRawData = await FileAttachment("/data/vulnerability_notebook/vulnerability_icicledata.csv").csv({typed: true})
```

```{ojs}
// Filter and prepare data for icicle plot
filteredSensitivityData = {
  if (!sensitivityRawData) return [];
  
  let data = sensitivityRawData;
  
  // Filter by admin selections
  if (selectedAdmin0) {
    data = data.filter(d => d.admin0_name === selectedAdmin0);
  }
  if (selectedAdmin1) {
    data = data.filter(d => d.admin1_name === selectedAdmin1);
  }
  if (selectedAdmin2) {
    data = data.filter(d => d.admin2_name === selectedAdmin2);
  }
  
  return data;
}

// Create hierarchical data structure for icicle plot
icicleHierarchyData = {
  if (!filteredSensitivityData || filteredSensitivityData.length === 0) return null;
  
  const hierarchy = icicleKeys.hierarchy;
  
  // Group data by hierarchy levels
  const grouped = d3.group(filteredSensitivityData, 
    d => d[hierarchy[0]], // gender
    d => d[hierarchy[1]], // age_group
    d => d[hierarchy[2]], // education_level
    d => d[hierarchy[3]], // poverty_status
    d => d[hierarchy[4]]  // malnutrition_status
  );
  
  // Convert to nested structure
  function createNode(group, level = 0, name = "root") {
    if (level >= hierarchy.length) {
      // Leaf node - aggregate values
      const totalValue = d3.sum(group, d => d.value || 0);
      const totalPop = d3.sum(group, d => d.population || 0);
      return {
        name,
        value: totalValue,
        population: totalPop,
        level,
        data: group[0] // Store first data point for metadata
      };
    }
    
    const children = [];
    for (const [key, subgroup] of group) {
      if (key !== "All") { // Skip "All" aggregates except at root
        const child = createNode(subgroup, level + 1, key);
        if (child.value > 0) children.push(child);
      }
    }
    
    const totalValue = d3.sum(children, d => d.value);
    const totalPop = d3.sum(children, d => d.population);
    
    return {
      name,
      value: totalValue,
      population: totalPop,
      level,
      children: children.length > 0 ? children : undefined
    };
  }
  
  return createNode(grouped);
}
```

```{ojs}
// Icicle plot implementation
function createIciclePlot(data, width = mapWidth, height = 500) {
  if (!data) return createNoDataState();

  const partition = d3.partition()
    .size([width, height])
    .padding(1);

  const root = d3.hierarchy(data)
    .sum(d => d.value)
    .sort((a, b) => b.value - a.value);

  partition(root);

  const svg = d3.create("svg")
    .attr("width", width)
    .attr("height", height)
    .attr("viewBox", [0, 0, width, height])
    .style("font", "12px sans-serif");

  // Color scale based on hierarchy level
  const colorScale = d3.scaleOrdinal()
    .domain([0, 1, 2, 3, 4])
    .range(["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd"]);

  let focus = root;

  const cell = svg
    .selectAll("g")
    .data(root.descendants())
    .join("g")
    .attr("transform", d => `translate(${d.x0},${d.y0})`);

  const rect = cell
    .append("rect")
    .attr("width", d => d.x1 - d.x0)
    .attr("height", d => d.y1 - d.y0)
    .attr("fill", d => colorScale(d.depth))
    .attr("fill-opacity", 0.8)
    .attr("stroke", "#fff")
    .attr("stroke-width", 1)
    .style("cursor", "pointer");

  const text = cell
    .append("text")
    .attr("x", 2)
    .attr("y", 14)
    .text(d => {
      const width = d.x1 - d.x0;
      const height = d.y1 - d.y0;
      if (width < 60 || height < 20) return "";
      
      // Get translated label
      const categoryKey = icicleKeys.hierarchy[d.depth];
      const category = icicleKeys.categories[categoryKey];
      const label = category?.[d.data.name]?.[_lang.key] || d.data.name;
      
      return label;
    })
    .attr("fill", "white")
    .attr("font-weight", "bold")
    .attr("font-size", "11px");

  // Add value labels
  cell
    .append("text")
    .attr("x", 2)
    .attr("y", 28)
    .text(d => {
      const width = d.x1 - d.x0;
      const height = d.y1 - d.y0;
      if (width < 60 || height < 35) return "";
      return formatNumber(d.value, 0);
    })
    .attr("fill", "white")
    .attr("font-size", "10px");

  // Zoom functionality
  function zoom(d) {
    focus = d;
    
    const transition = svg.transition()
      .duration(750)
      .tween("scale", () => {
        const xd = d3.interpolate(root.x0, d.x0);
        const yd = d3.interpolate(root.y0, d.y0);
        const xr = d3.interpolate(root.x1 - root.x0, d.x1 - d.x0);
        const yr = d3.interpolate(root.y1 - root.y0, d.y1 - d.y0);
        
        return t => {
          const x0 = xd(t);
          const y0 = yd(t);
          const x1 = x0 + xr(t);
          const y1 = y0 + yr(t);
          
          cell.attr("transform", p => {
            const px0 = (p.x0 - x0) / (x1 - x0) * width;
            const py0 = (p.y0 - y0) / (y1 - y0) * height;
            return `translate(${px0},${py0})`;
          });
          
          rect
            .attr("width", p => Math.max(0, (p.x1 - p.x0) / (x1 - x0) * width))
            .attr("height", p => Math.max(0, (p.y1 - p.y0) / (y1 - y0) * height));
        };
      });
  }

  // Click to zoom
  rect.on("click", (event, d) => {
    if (focus !== d) {
      zoom(d);
      event.stopPropagation();
    }
  });

  // Add tooltip
  rect.append("title")
    .text(d => {
      const categoryKey = icicleKeys.hierarchy[d.depth];
      const category = icicleKeys.categories[categoryKey];
      const label = category?.[d.data.name]?.[_lang.key] || d.data.name;
      return `${label}\n${_lang({en: "Population", fr: "Population"})}: ${formatNumber(d.value, 0)}\n${_lang({en: "Click to zoom", fr: "Cliquer pour zoomer"})}`;
    });

  return svg.node();
}

iciclePlot = {
  if (!icicleHierarchyData) {
    return createNoDataState(_lang(vulnerability_translations.no_data_available));
  }
  
  const plot = createIciclePlot(icicleHierarchyData);
  
  return htl.html`
    <div style="
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      padding: 20px;
      background-color: #fff;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      margin: 16px 0;
    ">
      <div style="margin-bottom: 16px;">
        <h4 style="margin: 0 0 8px 0; font-size: 16px; font-weight: 600;">
          ${_lang({en: "Vulnerability by Demographics", fr: "Vulnérabilité par démographie"})}
        </h4>
        <p style="margin: 0; font-size: 14px; color: #6b7280;">
          ${_lang({en: "Click on segments to explore deeper levels. Each color represents a different demographic dimension.", fr: "Cliquez sur les segments pour explorer des niveaux plus profonds. Chaque couleur représente une dimension démographique différente."})}
        </p>
      </div>
      ${plot}
    </div>
  `;
}
```

```{ojs}
// Breadcrumb navigation
icicleBreadcrumb = {
  if (!icicleCurrentLevel || icicleCurrentLevel.length === 0) {
    return htl.html``;
  }
  
  const breadcrumbs = icicleCurrentLevel.map((level, i) => {
    const categoryKey = icicleKeys.hierarchy[i];
    const categoryLabel = icicleKeys.labels[categoryKey]?.[_lang.key] || categoryKey;
    const valueLabel = icicleKeys.categories[categoryKey]?.[level]?.[_lang.key] || level;
    
    return `${categoryLabel}: ${valueLabel}`;
  }).join(" > ");
  
  return htl.html`
    <div style="
      background: #f3f4f6;
      border-radius: 6px;
      padding: 8px 12px;
      margin: 12px 0;
      font-size: 14px;
      color: #374151;
    ">
      <strong>${_lang(vulnerability_translations.breadcrumb_navigation)}:</strong> ${breadcrumbs}
      <button style="
        margin-left: 12px;
        padding: 4px 8px;
        border: 1px solid #d1d5db;
        border-radius: 4px;
        background: white;
        font-size: 12px;
        cursor: pointer;
      " onclick="mutable icicleCurrentLevel = []">
        ${_lang(vulnerability_translations.reset_zoom)}
      </button>
    </div>
  `;
}
```

```{ojs}
// Download functionality
sensitivityDownloadButton = {
  if (!filteredSensitivityData || filteredSensitivityData.length === 0) {
    return htl.html``;
  }
  
  return downloadButton(
    filteredSensitivityData, 
    `sensitivity_data_${getAdminSelection().replace(/\s+/g, '_')}`,
    _lang(vulnerability_translations.download_data)
  );
}
```

```{ojs}
// Dynamic insights
sensitivityInsights = {
  if (!filteredSensitivityData || filteredSensitivityData.length === 0) {
    return createNoDataState();
  }

  // Find most vulnerable group (highest proportion in disadvantaged categories)
  const vulnerableGroups = filteredSensitivityData
    .filter(d => d.poverty_status === "Poor" && d.malnutrition_status === "Malnourished")
    .sort((a, b) => (b.value || 0) - (a.value || 0))
    .slice(0, 3);
  
  if (vulnerableGroups.length === 0) {
    return createNoDataState("No vulnerability data available for analysis.");
  }
  
  const topGroup = vulnerableGroups[0];
  const totalPop = d3.sum(filteredSensitivityData, d => d.value || 0);
  const vulnerablePop = d3.sum(vulnerableGroups, d => d.value || 0);
  const percentage = ((vulnerablePop / totalPop) * 100).toFixed(1);
  
  const region = getAdminSelection();
  const groupLabel = `${topGroup.gender} ${topGroup.age_group}`.trim();
  
  const template = _lang(vulnerability_translations.sensitivity_insight_template);
  const replacements = [
    { name: "region", value: region },
    { name: "vulnerable_group", value: groupLabel },
    { name: "percentage", value: percentage }
  ];
  
  const insight = generateInsight(template, replacements);
  return createInsightDisplay(insight);
}
```

```{ojs}
// Display components
sensitivityControlsForm
icicleBreadcrumb
iciclePlot
sensitivityDownloadButton
sensitivityInsights
```


