---
pagetitle: "Sensitivity Section"
nb-authors: 
  - Johnson Mwakazi
  - Pete Stewart
  - Brayden Youngberg
date-created: '2025-02-19'
date-edited: today
css: styles.css
---

```{ojs}
sensitivityQuestion = _lang(vulnerability_translations.sensitivity_question)
```

# `{ojs} sensitivityQuestion ` {#sensitivity}

`{ojs} _lang(vulnerability_translations.sensitivity_description)`

```{ojs}
// Controls section - Admin selectors using static data to prevent flickering

viewof sensitivityAdmin0 = Inputs.select(sensitivityDataAdmin0, {label: "SSA", format: x => x.label,   value: "SSA"})
viewof sensitivityAdmin1 = Inputs.select(sensitivityDataAdmin1, {label: adminRegions.labels.admin1, format: x => x.label})
viewof sensitivityAdmin2 = Inputs.select(sensitivityDataAdmin2, {label: adminRegions.labels.admin2, format: x => x.label})



```

```{ojs}

sensitivityControlsForm = htl.html`
<div style="
  background: #f8fafc;
  border: 2px solid #e2e8f0;
  border-radius: 12px;
  padding: 24px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07);
  margin: 16px 0;
">
  <h3 style="margin: 0 0 20px 0; color: #2d3748; font-size: 1.1rem; font-weight: 600;">
    ${_lang(vulnerability_translations.geographic_selection)}
  </h3>
  <div style="
    display: flex;
    align-items: flex-start;
    gap: 20px;
    flex-wrap: nowrap;
    justify-content: space-between;
  " class="form-inputs-container">
    <div style="flex: 1; min-width: 180px;">${viewof sensitivityAdmin0}</div>
    <div style="flex: 1; min-width: 180px;">${viewof sensitivityAdmin1}</div>
    <div style="flex: 1; min-width: 180px;">${viewof sensitivityAdmin2}</div>
  </div>
</div>
`
```

```{ojs}
// Load icicle metadata and data
icicleKeys = await FileAttachment("/data/vulnerability_notebook/vulnerability_iciclekeys.json").json()
sensitivityRawData = await FileAttachment("/data/vulnerability_notebook/vulnerability_icicledata.csv").csv({typed: true})
```

```{ojs}

csv_raw = d3
  .csvParseRows(await FileAttachment("/data/vulnerability_notebook/vulnerability_icicledata.csv").text())
  .slice(1)


```


```{ojs}
breadcrumbWidth = 200
breadcrumbHeight = 35
targetHeight = 350
height = narrow ? narrowHeight : targetHeight
narrowHeight = 600
narrow = width <= 0
segmentX = d => (narrow ? d.y0 : d.x0)
segmentY = d => (narrow ? d.x0 : d.y0)
segmentWidth = d => (narrow ? d.y1 - d.y0 : d.x1 - d.x0)
segmentHeight = d => (narrow ? d.x1 - d.x0 : d.y1 - d.y0)



```

```{ojs}

partition = (data) =>
  d3
    .partition()
    .padding(1)
    .size(narrow ? [height, width] : [width, height])(
    d3
      .hierarchy(data)
      .sum((d) => d.value)
      .sort((a, b) => b.value - a.value)
  )



```

```{ojs}

function buildHierarchy(csv) {
  // Helper function that transforms the given CSV into a hierarchical format.
  const root = { name: "root", children: [] };
  for (let i = 0; i < csv.length; i++) {
    const sequence = csv[i][0];
    const size = +csv[i][1];
    if (isNaN(size)) {
      // e.g. if this is a header row
      continue;
    }
    const parts = sequence.split("_");
    let currentNode = root;
    for (let j = 0; j < parts.length; j++) {
      const children = currentNode["children"];
      const nodeName = parts[j];
      let childNode = null;
      let foundChild = false;
      // Search for existing child with the same name
      for (let k = 0; k < children.length; k++) {
        if (children[k]["name"] === nodeName) {
          childNode = children[k];
          foundChild = true;
          break;
        }
      }
      // If not found, create a new child node
      if (!foundChild) {
        childNode = { name: nodeName, children: [] };
        children.push(childNode);
      }
      currentNode = childNode;
      // If it's the last part of the sequence, create a leaf node
      if (j === parts.length - 1) {
        childNode.value = size;
      }
    }
  }
  return root;
}


console.log({csv_raw})

```





```{ojs}
csv = {
  if (sensitivityAdmin1.value === null || sensitivityAdmin1.value === "") {
    return csv_raw
      .filter(
        (item) => item[0] === sensitivityAdmin0.value && item[1] === "NA" && item[2] === "NA"
      )
      .map((item) => [item[3], item[4]]);
  } else if (sensitivityAdmin1.value !== null && (sensitivityAdmin2.value === null || sensitivityAdmin2.value === "")) {
    return csv_raw
      .filter(
        (item) => item[0] === sensitivityAdmin0.value && item[1] === sensitivityAdmin2.value && item[2] === "NA"
      )
      .map((item) => [item[3], item[4]]);
  } else if (sensitivityAdmin1.value !== null && sensitivityAdmin2.value !== null) {
    return csv_raw
      .filter(
        (item) =>
          item[0] === sensitivityAdmin0.value && item[1] === sensitivityAdmin2.value && item[2] === sensitivityAdmin2.value
      )
      .map((item) => [item[3], item[4]]);
  }
}


console.log({csv})
```

```{ojs}

data = buildHierarchy(csv)


```

```{ojs}

// Generate a string that describes the points of a breadcrumb SVG polygon.
function breadcrumbPoints(d, i) {
  const tipWidth = 10;
  const points = [];
  points.push("0,0");
  points.push(`${breadcrumbWidth},0`);
  points.push(`${breadcrumbWidth + tipWidth},${breadcrumbHeight / 2}`);
  points.push(`${breadcrumbWidth},${breadcrumbHeight}`);
  points.push(`0,${breadcrumbHeight}`);
  if (i > 0) {
    // Leftmost breadcrumb; don't include 6th vertex.
    points.push(`${tipWidth},${breadcrumbHeight / 2}`);
  }
  return points.join(" ");
}

```

```{ojs}

alias = {
  const flat_alias = Object.fromEntries(
    Object.values(icicleKeys).flatMap((obj) =>
      Object.entries(obj).map(([k, v]) => [k, v[0]])
    )
  );
  flat_alias.population = "Total Population";
  return flat_alias;
}


```


```{ojs}

color = d3
  .scaleOrdinal()
  .domain([
    "population",
    "poverty2",
    "poverty1",
    "poverty0",
    "education2",
    "education1",
    "education0",
    "gender2",
    "gender1",
    "gender0"
  ])
  .range([
    "#a4a4a4",
    "#ec5a47",
    "#fc8a34",
    "#f4bb21",
    "#f4bb21",
    "#fc8a34",
    "#ec5a47",
    "#f4bb21",
    "#fc8a34",
    "#ec5a47"
  ])


```




```{ojs}

breadcrumb = {
  const svg = d3
    .create("svg")
    .attr("viewBox", `0 0 ${breadcrumbWidth * 4.75} ${breadcrumbHeight}`)
    .style("font", "13px sans-serif")
    .style("margin", "2px");

  const g = svg
    .selectAll("g")
    .data(icicle.sequence)
    .join("g")
    .attr("transform", (d, i) => `translate(${i * breadcrumbWidth}, 0)`);

  g.append("polygon")
    .attr("points", breadcrumbPoints)
    .attr("fill", (d) => color(d.data.name))
    .attr("stroke", "white");

  g.append("text")
    .attr("x", (breadcrumbWidth + 10) / 2)
    .attr("y", 15)
    .attr("dy", "0.35em")
    .attr("text-anchor", "middle")
    .attr("fill", "white")
    .text((d) => alias[d.data.name]);
  // .text((d) => d.data.name);

  if (icicle.sequence.length > 1) {
    svg
      .append("text")
      .text(icicle.percentage > 0 ? icicle.percentage + "%" : "")
      .attr("x", (icicle.sequence.length + 0.25) * breadcrumbWidth)
      .attr("y", breadcrumbHeight / 2)
      .attr("dy", "0.35em")
      .attr("text-anchor", "middle");
  }

  return svg.node();
}

        console.log({csv})

```


```{ojs}

viewof icicle = {
  const icicle_color = d3
    .scaleOrdinal()
    .domain([
      "population",
      "poverty2",
      "poverty1",
      "poverty0",
      "education2",
      "education1",
      "education0",
      "gender2",
      "gender1",
      "gender0"
    ])
    .range([
      "#a4a4a4",
      "#ec5a47",
      "#fc8a34",
      "#f4bb21",
      "#f4bb21",
      "#fc8a34",
      "#ec5a47",
      "#f4bb21",
      "#fc8a34",
      "#ec5a47"
    ]);
  const root = partition(data);
  let frozen = false;
  let frozenSequence = [];
  // const padding = 10;
  const svg = d3.create("svg");
  // Make this into a view, so that the currently hovered sequence is available to the breadcrumb
  const element = svg.node();
  element.value = { sequence: [], percentage: 0.0 };

  svg
    .attr("viewBox", `0 0 ${width} ${height}`)
    .style("font", "12px sans-serif");

  svg
    .append("rect")
    .attr("width", width)
    .attr("height", height)
    .attr("fill", "none");

  const segment = svg
    .append("g")
    .attr("transform", (d) =>
      narrow ? `translate(${-root.y1}, 40)` : `translate(0, ${-root.y1 + 40})`
    )
    .selectAll("rect")
    .data(
      root.descendants().filter((d) => {
        return d.depth;
      })
    )
    .join("rect")
    .attr("fill", (d) => icicle_color(d.data.name))
    .attr("x", segmentX)
    .attr("y", segmentY)
    .attr("width", segmentWidth)
    .attr("height", segmentHeight)
    .on("mouseenter", (event, d) => {
      if (frozen) return;
      // Get the ancestors of the current segment, minus the root
      const sequence = d.ancestors().reverse().slice(1);
      // Highlight the ancestors
      segment.attr("fill-opacity", (node) =>
        sequence.indexOf(node) >= 0 ? 1.0 : 0.3
      );
      const percentage = (100 * (d.value / root.value)).toPrecision(3);
      element.value = { sequence, percentage };
      element.dispatchEvent(new CustomEvent("input"));
    })
    .on("click", (event, d) => {
      if (frozen) {
        frozen = false;
        return;
      } else {
        frozen = true;
        frozenSequence = d.ancestors().reverse().slice(1);
        segment.attr("fill-opacity", (node) =>
          frozenSequence.indexOf(node) >= 0 ? 1.0 : 0.3
        );
        const percentage = (100 * (d.value / root.value)).toPrecision(3);
        element.value = { sequence: frozenSequence, percentage };
        element.dispatchEvent(new CustomEvent("input"));
        event.stopPropagation(); // prevent svg click from firing
      }
    });

  svg.on("mouseleave", () => {
    if (frozen) return;
    segment.attr("fill-opacity", 1);
    // Update the value of this view
    element.value = { sequence: [], percentage: 0.0 };
    element.dispatchEvent(new CustomEvent("input"));
  });

  svg.on("click", () => {
    if (frozen) {
      frozen = false;
      frozenSequence = [];
      segment.attr("fill-opacity", 1);
      element.value = { sequence: [], percentage: 0.0 };
      element.dispatchEvent(new CustomEvent("input"));
    }
  });

  // add legend
  const colorScale = d3
    .scaleOrdinal()
    .domain(["Better", "Moderate", "Worse"])
    .range(["#F4BB21", "#FC8A34", "#EC5A47"]);

  svg
    .append("rect")
    .attr("x", 1)
    .attr("y", 5)
    .attr("rx", 10) // Add rounded corners
    .attr("ry", 10) // Add rounded corners
    .attr("width", 300) // Adjust the width to fit the legend
    .attr("height", 30) // Adjust the height to fit the legend
    .attr("fill", "#fff");
  // .attr("stroke", "black");

  const legend = svg
    .selectAll(".legend")
    .data(colorScale.domain())
    .enter()
    .append("g")
    .attr("class", "legend")
    .attr("transform", function (d, i) {
      return "translate(" + (i * 100 + 25) + ",11)";
    });

  legend
    .append("rect")
    .attr("x", 0)
    .attr("width", 18)
    .attr("height", 18)
    .style("fill", colorScale);

  legend
    .append("text")
    .attr("x", 24)
    .attr("y", 9)
    .attr("dy", ".35em")
    .text(function (d) {
      return d;
    });

  return element;
}



```




```{ojs}
// Filter and prepare data for icicle plot
filteredSensitivityData = {
  if (!sensitivityRawData) return [];
  
  let data = sensitivityRawData;
  
  // Filter by admin selections
  if (sensitivityAdmin0.value) {
    data = data.filter(d => d.admin0_name === sensitivityAdmin0.value);
  }
  if (sensitivityAdmin1.value) {
    data = data.filter(d => d.admin1_name === sensitivityAdmin1.value);
  }
  if (sensitivityAdmin2.value) {
    data = data.filter(d => d.admin2_name === sensitivityAdmin2.value);
  }
  
  return data;
}

console.log({filteredSensitivityData})

// Create hierarchical data structure for icicle plot
icicleHierarchyData = {
  if (!filteredSensitivityData || filteredSensitivityData.length === 0) return null;
  
  const hierarchy = icicleKeys.hierarchy;
  
  // Group data by hierarchy levels
  const grouped = d3.group(filteredSensitivityData, 
    d => d[hierarchy[0]], // gender
    d => d[hierarchy[1]], // age_group
    d => d[hierarchy[2]], // education_level
    d => d[hierarchy[3]], // poverty_status
    d => d[hierarchy[4]]  // malnutrition_status
  );
  
  // Convert to nested structure
  function createNode(group, level = 0, name = "root") {
    if (level >= hierarchy.length) {
      // Leaf node - aggregate values
      const totalValue = d3.sum(group, d => d.value || 0);
      const totalPop = d3.sum(group, d => d.population || 0);
      return {
        name,
        value: totalValue,
        population: totalPop,
        level,
        data: group[0] // Store first data point for metadata
      };
    }
    
    const children = [];
    for (const [key, subgroup] of group) {
      if (key !== "All") { // Skip "All" aggregates except at root
        const child = createNode(subgroup, level + 1, key);
        if (child.value > 0) children.push(child);
      }
    }
    
    const totalValue = d3.sum(children, d => d.value);
    const totalPop = d3.sum(children, d => d.population);
    
    return {
      name,
      value: totalValue,
      population: totalPop,
      level,
      children: children.length > 0 ? children : undefined
    };
  }
  
  return createNode(grouped);
}
```

```{ojs}
// Icicle plot implementation
function createIciclePlot(data, width = mapWidth, height = 500) {
  if (!data) return createNoDataState();

  const partition = d3.partition()
    .size([width, height])
    .padding(1);

  const root = d3.hierarchy(data)
    .sum(d => d.value)
    .sort((a, b) => b.value - a.value);

  partition(root);

  const svg = d3.create("svg")
    .attr("width", width)
    .attr("height", height)
    .attr("viewBox", [0, 0, width, height])
    .style("font", "12px sans-serif");

  // Color scale based on hierarchy level
  const colorScale = d3.scaleOrdinal()
    .domain([0, 1, 2, 3, 4])
    .range(["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd"]);

  let focus = root;

  const cell = svg
    .selectAll("g")
    .data(root.descendants())
    .join("g")
    .attr("transform", d => `translate(${d.x0},${d.y0})`);

  const rect = cell
    .append("rect")
    .attr("width", d => d.x1 - d.x0)
    .attr("height", d => d.y1 - d.y0)
    .attr("fill", d => colorScale(d.depth))
    .attr("fill-opacity", 0.8)
    .attr("stroke", "#fff")
    .attr("stroke-width", 1)
    .style("cursor", "pointer");

  const text = cell
    .append("text")
    .attr("x", 2)
    .attr("y", 14)
    .text(d => {
      const width = d.x1 - d.x0;
      const height = d.y1 - d.y0;
      if (width < 60 || height < 20) return "";
      
      // Get translated label
      const categoryKey = icicleKeys.hierarchy[d.depth];
      const category = icicleKeys.categories[categoryKey];
      const label = category?.[d.data.name]?.[_lang.key] || d.data.name;
      
      return label;
    })
    .attr("fill", "white")
    .attr("font-weight", "bold")
    .attr("font-size", "11px");

  // Add value labels
  cell
    .append("text")
    .attr("x", 2)
    .attr("y", 28)
    .text(d => {
      const width = d.x1 - d.x0;
      const height = d.y1 - d.y0;
      if (width < 60 || height < 35) return "";
      return formatNumber(d.value, 0);
    })
    .attr("fill", "white")
    .attr("font-size", "10px");

  // Zoom functionality
  function zoom(d) {
    focus = d;
    
    const transition = svg.transition()
      .duration(750)
      .tween("scale", () => {
        const xd = d3.interpolate(root.x0, d.x0);
        const yd = d3.interpolate(root.y0, d.y0);
        const xr = d3.interpolate(root.x1 - root.x0, d.x1 - d.x0);
        const yr = d3.interpolate(root.y1 - root.y0, d.y1 - d.y0);
        
        return t => {
          const x0 = xd(t);
          const y0 = yd(t);
          const x1 = x0 + xr(t);
          const y1 = y0 + yr(t);
          
          cell.attr("transform", p => {
            const px0 = (p.x0 - x0) / (x1 - x0) * width;
            const py0 = (p.y0 - y0) / (y1 - y0) * height;
            return `translate(${px0},${py0})`;
          });
          
          rect
            .attr("width", p => Math.max(0, (p.x1 - p.x0) / (x1 - x0) * width))
            .attr("height", p => Math.max(0, (p.y1 - p.y0) / (y1 - y0) * height));
        };
      });
  }

  // Click to zoom
  rect.on("click", (event, d) => {
    if (focus !== d) {
      zoom(d);
      event.stopPropagation();
    }
  });

  // Add tooltip
  rect.append("title")
    .text(d => {
      const categoryKey = icicleKeys.hierarchy[d.depth];
      const category = icicleKeys.categories[categoryKey];
      const label = category?.[d.data.name]?.[_lang.key] || d.data.name;
      return `${label}\n${_lang({en: "Population", fr: "Population"})}: ${formatNumber(d.value, 0)}\n${_lang({en: "Click to zoom", fr: "Cliquer pour zoomer"})}`;
    });

  return svg.node();
}

iciclePlot = {
  if (!icicleHierarchyData) {
    return createNoDataState(_lang(vulnerability_translations.no_data_available));
  }
  
  const plot = createIciclePlot(icicleHierarchyData);
  
  return htl.html`
    <div style="
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      padding: 20px;
      background-color: #fff;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      margin: 16px 0;
    ">
      <div style="margin-bottom: 16px;">
        <h4 style="margin: 0 0 8px 0; font-size: 16px; font-weight: 600;">
          ${_lang({en: "Vulnerability by Demographics", fr: "Vulnérabilité par démographie"})}
        </h4>
        <p style="margin: 0; font-size: 14px; color: #6b7280;">
          ${_lang({en: "Click on segments to explore deeper levels. Each color represents a different demographic dimension.", fr: "Cliquez sur les segments pour explorer des niveaux plus profonds. Chaque couleur représente une dimension démographique différente."})}
        </p>
      </div>
      ${plot}
    </div>
  `;
}
```

```{ojs}
// Breadcrumb navigation
icicleBreadcrumb = {
  if (!icicleCurrentLevel || icicleCurrentLevel.length === 0) {
    return htl.html``;
  }
  
  const breadcrumbs = icicleCurrentLevel.map((level, i) => {
    const categoryKey = icicleKeys.hierarchy[i];
    const categoryLabel = icicleKeys.labels[categoryKey]?.[_lang.key] || categoryKey;
    const valueLabel = icicleKeys.categories[categoryKey]?.[level]?.[_lang.key] || level;
    
    return `${categoryLabel}: ${valueLabel}`;
  }).join(" > ");
  
  return htl.html`
    <div style="
      background: #f3f4f6;
      border-radius: 6px;
      padding: 8px 12px;
      margin: 12px 0;
      font-size: 14px;
      color: #374151;
    ">
      <strong>${_lang(vulnerability_translations.breadcrumb_navigation)}:</strong> ${breadcrumbs}
      <button style="
        margin-left: 12px;
        padding: 4px 8px;
        border: 1px solid #d1d5db;
        border-radius: 4px;
        background: white;
        font-size: 12px;
        cursor: pointer;
      " onclick="mutable icicleCurrentLevel = []">
        ${_lang(vulnerability_translations.reset_zoom)}
      </button>
    </div>
  `;
}
```

```{ojs}
// Download functionality
sensitivityDownloadButton = {
  if (!filteredSensitivityData || filteredSensitivityData.length === 0) {
    return htl.html``;
  }
  
  return downloadButton(
    filteredSensitivityData, 
    `sensitivity_data_${getAdminSelection().replace(/\s+/g, '_')}`,
    _lang(vulnerability_translations.download_data)
  );
}
```

```{ojs}
// Dynamic insights
sensitivityInsights = {
  if (!filteredSensitivityData || filteredSensitivityData.length === 0) {
    return createNoDataState();
  }

  // Find most vulnerable group (highest proportion in disadvantaged categories)
  const vulnerableGroups = filteredSensitivityData
    .filter(d => d.poverty_status === "Poor" && d.malnutrition_status === "Malnourished")
    .sort((a, b) => (b.value || 0) - (a.value || 0))
    .slice(0, 3);
  
  if (vulnerableGroups.length === 0) {
    return createNoDataState("No vulnerability data available for analysis.");
  }
  
  const topGroup = vulnerableGroups[0];
  const totalPop = d3.sum(filteredSensitivityData, d => d.value || 0);
  const vulnerablePop = d3.sum(vulnerableGroups, d => d.value || 0);
  const percentage = ((vulnerablePop / totalPop) * 100).toFixed(1);
  
  const region = getAdminSelection();
  const groupLabel = `${topGroup.gender} ${topGroup.age_group}`.trim();
  
  const template = _lang(vulnerability_translations.sensitivity_insight_template);
  const replacements = [
    { name: "region", value: region },
    { name: "vulnerable_group", value: groupLabel },
    { name: "percentage", value: percentage }
  ];
  
  const insight = generateInsight(template, replacements);
  return createInsightDisplay(insight);
}
```
<!-- 
```{ojs}
// Display components
sensitivityControlsForm
icicleBreadcrumb
iciclePlot
sensitivityDownloadButton
sensitivityInsights
```
 -->

