---
pagetitle: "Atlas Notebook Template"
nb-authors: 
  - Brayden Youngberg
  - Pete Stewart
date-created: '2025-02-19'
date-edited: today
css: styles.css
---



```{ojs}
// all imports
import {toc} from "@nebrius/indented-toc"
import { lang as Lang } from "/helpers/lang.js"
import { atlasTOC, atlasHero } from "/helpers/uiComponents.ojs"



topojson = require("topojson")

general_translations = await FileAttachment("/data/shared/generalTranslations.json").json()
vulnerability_translations = await FileAttachment("/data/vulnerability_notebook/translations.json").json()

hero_url = "./../../images/default_crop.webp" 

```


{{< include _hero_section.qmd >}}

```{ojs}
 overview = _lang(vulnerability_translations.notebook_overview)
```

# `{ojs} overview ` {#overview}

`{ojs} _lang(vulnerability_translations.notebook_overview_text1)`

`{ojs} _lang(vulnerability_translations.notebook_overview_text2)`


{{< include _exposure_section.qmd >}}

{{< include _sensitivity_section.qmd >}}



# `{ojs} appendix` {#appendix}


```{ojs}

toc_bottom = atlasTOC({
  skip: ['notebook-title', 'appendix', 'source-code'], // These should be the section headings in the {# headings} 
  heading: `<b>${Lang.toSentenceCase(_lang(general_translations.toc))}</b>`
})

htl.html`
      <div class='floating-toc'>
      ${toc_bottom}
      </div>
      `
```

# Source code {#source-code .hidden} 
<!-- 
NOTE:Everything below this point will not appear in the notebook.
This is useful to hide all of the code, master selectors (language, admin level, etc.),
and other things that are needed for the notebook to run but would be messy if
actually appearing in the notebook.
-->


<!-- Text and Language Translations -->
```{ojs}
// This cell is to contain all the headings and the notebook title
// key_insights = _lang({en: "Key Insights", fr: "Résumé"})

appendix = _lang(general_translations.appendix)
```




```{ojs}

viewof masterLanguage = Inputs.radio(languages, {
  label: "Main language toggle",
  format: (d) => d.key,
  value: languages.find((x) => x.key === defaultLangKey),
})
```


```{ojs}
// import { NavbarLangSelector } from "/helpers/uiComponents.ojs"
function NavbarLangSelector(language_obj, masterLanguage) {
  let navEnd = document.querySelector(".navbar-nav.ms-auto .nav-item.compact");
  if (navEnd) {
    let existingLangSelector = document.getElementById("nav-lang-selector");
    if (!existingLangSelector) {
      let lang_sel = Inputs.bind(
        Inputs.radio(language_obj, {
          label: "",
          format: (d) => d.label
        }),
        viewof masterLanguage
      );
      lang_sel.id = "nav-lang-selector";
      
      // Hack the css together for the observable inputs
      lang_sel.style.display = "flex";
      lang_sel.style.alignItems = "center";
      lang_sel.style.marginLeft = "10px";
      let lang_div = lang_sel.querySelector("div");
      lang_div.style.display = "flex";
      lang_div.style.flexDirection = "column";

      // Insert the new item after the GitHub icon and other elements
      navEnd.parentNode.appendChild(lang_sel);
    }
  }
}

NavbarLangSelector(languages, masterLanguage)
```


```{ojs}
prettyLanguageView = {
  return Inputs.bind(
    Inputs.radio(languages, {
      label: _lang(general_translations.language),
      format: (d) => d.label
    }),
    viewof masterLanguage
  );
}
```

