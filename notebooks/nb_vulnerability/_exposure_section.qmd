---
pagetitle: "Exposure Section"
nb-authors: 
  - Johnson Mwakazi
  - Pete Stewart
  - Brayden Youngberg
date-created: '2025-02-19'
date-edited: today
css: styles.css
---

```{ojs}
exposureQuestion = _lang(vulnerability_translations.exposure_question)
```

# `{ojs} exposureQuestion ` {#exposure}

`{ojs} _lang(vulnerability_translations.exposure_description)`

```{ojs}

viewof selectAdmin0 = Inputs.select(dataAdmin0, {label: adminRegions.labels.admin0, format: x => x.label})
viewof selectAdmin1 = Inputs.select(dataAdmin1, {label: adminRegions.labels.admin1, format: x => x.label})
viewof selectAdmin2 = Inputs.select(dataAdmin2, {label: adminRegions.labels.admin2, format: x => x.label})


```

```{ojs}



viewof exposureHazard = Inputs.select(hazardTypes, {
  label: _lang(vulnerability_translations.hazard_type),
  format: d => d.label,
  value: hazardTypes[2] // "any"
})



exposureControlsForm = htl.html`
<div style="
  background: #f8fafc;
  border: 2px solid #e2e8f0;
  border-radius: 12px;
  padding: 24px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07);
  margin: 16px 0;
">
  <h3 style="margin: 0 0 20px 0; color: #2d3748; font-size: 1.1rem; font-weight: 600;">
    ${_lang(vulnerability_translations.geographic_selection)}
  </h3>
  <div style="
    display: flex;
    align-items: flex-start;
    gap: 20px;
    flex-wrap: nowrap;
    justify-content: space-between;
  " class="form-inputs-container">
    <div style="flex: 1; min-width: 180px;">${viewof selectAdmin0}</div>
    <div style="flex: 1; min-width: 180px;">${viewof selectAdmin1}</div>
    <div style="flex: 1; min-width: 180px;">${viewof selectAdmin2}</div>
  </div>
</div>
<div style="
  background: #ffffff;
  border: 1px solid #e5e7eb;
  border-radius: 8px;
  padding: 16px;
  margin: 12px 0;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
">
  <div style="
    display: flex;
    align-items: center;
    gap: 16px;
    flex-wrap: wrap;
  " class="controls-container">
    <div>${viewof exposureHazard}</div>
  </div>
</div>
`
```

```{ojs}
// Data loading and processing
exposureDb = await createExposureDB() // Use prototype data

exposureData = {
  if (!exposureDb) return [];
  
  try {
    const query = `
      SELECT *
      FROM exposure_data
      WHERE hazard = '${exposureHazard.value}'
    `;
    
    return await exposureDb.query(query);
  } catch (error) {
    console.error("Error querying exposure data:", error);
    return [];
  }
}

```

```{ojs}

// grab tabular data for choropleth
dataGeoImpact = {
  // get data for choropleth map based on choice
  const dataSource = exposureData

  // select different data based on admin selections
  if (selectAdmin1.value) {
    // admin1 or 2 is selected, show all admin2's for selected admin1
    return tidy(
      dataSource,
      filter((d) => {
        return d.admin0_name == selectAdmin0
          && d.admin1_name == selectAdmin1
          && d.admin2_name // always non-null
      })
    );
  } else if (selectAdmin0.value) {
    // admin0 is selected, with no admin1
    // get all admin1 data for selected admin0
    return tidy(
      dataSource,
      filter((d) => {
        return d.admin0_name == selectAdmin0
        && d.admin1_name // always non-null 
        && !d.admin2_name // always null
      })
    )
  } else {
    // end case: admin0 is not selected
    // get all admin0 data
    return tidy(
      dataSource,
      filter((d) => {
        return !d.admin1_name // always null 
        && !d.admin2_name // always null
      })
    )
  }
}


```


```{ojs}
// Geographic data binding
exposureMapData = {
  // if (!dataGeoImpact || dataGeoImpact.length === 0) {
  //   return { features: [] };
  // }

  // Determine which admin level to show
  if (!selectAdmin0.value) {
    // Show admin0 level
    return bindTabularToGeo({
      data: dataGeoImpact,
      dataBindColumn: "admin0_name",
      geoData: boundaries.admin0,
      geoDataBindColumn: "admin0_name"
    });
  } else if (!selectAdmin1.value) {
    // Show admin1 level within selected admin0
    const data = tidy(
      dataGeoImpact,
      mutate({ a1_a0: (d) => [d.admin1_name, d.admin0_name].join("_") })
    );
    
    const geoData = {
      ...boundaries.admin1,
      features: boundaries.admin1.features.filter(
        d => d.properties.admin0_name === selectAdmin0?.value
      )
    };

    return bindTabularToGeo({
      data: data,
      dataBindColumn: "a1_a0",
      geoData: geoData,
      geoDataBindColumn: "a1_a0"
    });
  } else {
    // Show admin2 level within selected admin1
    const data = tidy(
      dataGeoImpact,
      mutate({
        a2_a1_a0: (d) => [d.admin2_name, d.admin1_name, d.admin0_name].join("_")
      })
    );
    
    const geoData = {
      ...boundaries.admin2,
      features: boundaries.admin2.features.filter(d => 
        d.properties.admin1_name === selectAdmin1?.value &&
        d.properties.admin0_name === selectAdmin0?.value
      )
    };

    return bindTabularToGeo({
      data: data,
      dataBindColumn: "a2_a1_a0",
      geoData: geoData,
      geoDataBindColumn: "a2_a1_a0"
    });
  }
}
```


```{ojs}
// Visualization
exposureChoroplethMap = {  
  if (!exposureMapData || !exposureMapData.features || exposureMapData.features.length === 0) {
    return createNoDataState(_lang(vulnerability_translations.no_data_available));
  }

  const data = exposureMapData;

  
  const plot = Plot.plot({
    width: mapWidth,
    height: mapHeight,
    caption: vopNote.caption,
    projection: {
      type: "azimuthal-equal-area",
      domain: data
    },
    color: {
      legend: true,
      label: `${_lang({en: "Value of Production", fr: "Valeur de production"})} (${intDollarUnit})`,
      range: colorScales.range.yellowGreen,
      unknown: colorScales.unknown,
      tickFormat: formatNumCompactShort,
    },
    marks: [
      // Base geography
      Plot.geo(data.features, {
        fill: d => {
         const dataColumn = 'value'
          const fillValue = d.properties.data ? d.properties.data[dataColumn] : null; // handle missing data
          return fillValue
        },
        stroke: "#fff",
        strokeWidth: 0.5
      }),
      
      // Highlight selected admin2 region
      Plot.geo(
        selectAdmin2?.value
          ? data.features.filter(d => d.properties.admin2_name === selectAdmin2?.value)
          : [], 
        {
        fill: null,
        stroke: "#333",
          strokeWidth: 1.5
        }
      ),
      
      // Interactive pointer
      Plot.geo(data, Plot.pointer(Plot.centroid({
        stroke: "#333",
        strokeWidth: 1.5,
      }))),
      
      // Tooltip
      Plot.tip(
        data.features,
        Plot.pointer(Plot.centroid({
            channels: {
            region: d => {
              if (selectAdmin1?.value) return d.properties.admin2_name;
              if (selectAdmin0?.value) return d.properties.admin1_name;
              return d.properties.admin0_name;
            },
            country: d => d.properties.admin0_name,
            VoP: d => {
              const value = d.properties.data?.value;
              return value ? formatIntDollar(value) : "No data";
            },
            hazard: () => hazardTypes.find(h => h.value === exposureHazard)?.label || exposureHazard?.label
            },
            format: {
            region: false,
            country: d => selectAdmin0?.value ? false : d,
            VoP: true,
            hazard: false
          }
        }))
      )
    ]
  });

  return htl.html`
    <div style="
      border: 1px solid #e5e7eb;
      border-radius: 8px;
    padding: 20px;
    background-color: #fff;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      margin: 16px 0;
  ">
    ${plot}
    </div>
  `;
}
```

```{ojs}
// Download functionality
exposureDownloadButton = {
  if (!dataGeoImpact || dataGeoImpact.length === 0) {
    return htl.html``;
  }
  
  return downloadButton(
    dataGeoImpact, 
    `exposure_data_${getAdminSelection().replace(/\s+/g, '_')}_${exposureHazard?.value}`,
    _lang(vulnerability_translations.download_data)
  );
}
```

```{ojs}
// Dynamic insights
exposureInsights = {
  if (!dataGeoImpact || dataGeoImpact.length === 0) {
    return createNoDataState();
  }

  // Calculate total exposure value
  const totalValue = d3.sum(dataGeoImpact, d => d.value || 0);
  const region = getAdminSelection();
  const hazardLabel = hazardTypes.find(h => h.value === exposureHazard)?.label || exposureHazard.value;
  
  const template = _lang(vulnerability_translations.exposure_insight_template);
  const replacements = [
    { name: "region", value: region },
    { name: "amount", value: formatIntDollar(totalValue) },
    { name: "hazard", value: hazardLabel.toLowerCase() }
  ];
  
  const insight = generateInsight(template, replacements);
  return createInsightDisplay(insight);
}
```

```{ojs}
// Display components
exposureControlsForm
exposureChoroplethMap
exposureDownloadButton
exposureInsights
```